arch aarch64;

regspace {
	bank RBX (u64, 31, 8, 8, 0);
	bank RBW (u32, 31, 4, 8, 0);
};

regspace {
	slot SP (u64, 8, 0) SP;
	slot WSP (u32, 4, 0);

	slot PC (u64, 8, 8) PC;
};

regspace {
	slot C (u8, 1, 0) C;
	slot Z (u8, 1, 1) Z;
	slot N (u8, 1, 2) N;
	slot V (u8, 1, 3) V;
};

isa a64 {
	format ADD_SUB_IMM {
		sf:1;
		op:1;
		S:1;
		0x11:5;
		shift:2;
		imm12:12;
		rn:5;
		rd:5;
	};

	format INVALID { };
};

isa a64 {
	instruction<ADD_SUB_IMM> add {
		match (op == 0);

		behaviour<u32> add (sf == 0);
		behaviour<u64> add (sf == 1);
	};

	instruction<ADD_SUB_IMM> sub {
		match (op == 1);

		behaviour<u32> sub (sf == 0);
		behaviour<u64> sub (sf == 1);
	};

	default {
		behaviour invalid;
	};
};

behaviour<a64.ADD_SUB_IMM> add<T> {
	T imm = decode_imm<T>(inst.imm12, (u8)inst.shift);
	T op1 = read_gpr<T>((u8)inst.rn);

	f32 x = 5;
	T result = op1 + imm + x;

	write_gpr<T>((u8)inst.rd, result);

	if (inst.S) {
		__builtin_update_zn_flags(result);
	}
};

behaviour<a64.ADD_SUB_IMM> sub<T> {
	T imm = decode_imm<T>(inst.imm12, (u8)inst.shift);
	T op1 = read_gpr<T>((u8)inst.rn);

	write_gpr<T>((u8)inst.rd, op1 - imm);

	not_implemented();
};

behaviour<a64.INVALID> invalid {
	trap();
};

helper u64 read_gpr<u64>(u8 reg)
{
	if (reg == 31) return read_register(SP);
	else return read_register_bank(RBX, reg);
};

helper u32 read_gpr<u32>(u8 reg)
{
	if (reg == 31) return read_register(WSP);
	else return read_register_bank(RBW, reg);
};

helper void write_gpr<u64>(u8 reg, u64 val)
{
	if (reg == 31) write_register(SP, val);
	else write_register_bank(RBX, reg, val);
};

helper void write_gpr<u32>(u8 reg, u32 val)
{
	if (reg == 31) write_register(WSP, val);
	else write_register_bank(RBX, reg, (u64)val);
};

helper u64 decode_imm<u64>(u32 imm, u8 shift)
{
	return (u64)imm;
};

helper u32 decode_imm<u32>(u32 imm, u8 shift)
{
	return (u32)imm;
};

helper void not_implemented()
{
	trap();
};
