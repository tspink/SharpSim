//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ArchFile.g by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class ArchFileParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, HEX_VAL=41, INT_CONST=42, FLOAT_CONST=43, STRING=44, 
		COLON=45, SEMICOLON=46, LBRACE=47, RBRACE=48, LCHEV=49, RCHEV=50, LPAREN=51, 
		RPAREN=52, LBRACKET=53, RBRACKET=54, EQ=55, PLUS=56, COMMA=57, DOT=58, 
		STAR=59, QMARK=60, AMPERSAND=61, TILDE=62, ARCH=63, ISA=64, FORMAT=65, 
		REGSPACE=66, BANK=67, VECTOR=68, SLOT=69, BEHAVIOUR=70, INSTRUCTION=71, 
		MATCH=72, DISASM=73, APPEND=74, WHERE=75, HELPER=76, IDENT=77, WS=78;
	public const int
		RULE_start = 0, RULE_arch_ident = 1, RULE_def = 2, RULE_isa_block_def = 3, 
		RULE_isa_part = 4, RULE_format_def = 5, RULE_format_field_def = 6, RULE_regspace_def = 7, 
		RULE_reg_def = 8, RULE_reg_bank_def = 9, RULE_vector_reg_def = 10, RULE_reg_slot_def = 11, 
		RULE_insn_def = 12, RULE_insn_part = 13, RULE_match_part = 14, RULE_match_expr = 15, 
		RULE_match_expr_part = 16, RULE_disasm_part = 17, RULE_disasm_statement = 18, 
		RULE_disasm_append = 19, RULE_disasm_format = 20, RULE_disasm_where = 21, 
		RULE_behaviour_part = 22, RULE_behaviour_def = 23, RULE_helper_def = 24, 
		RULE_prototype = 25, RULE_parameter_list = 26, RULE_attr = 27, RULE_parameter = 28, 
		RULE_fnbody = 29, RULE_statement = 30, RULE_expression_statement = 31, 
		RULE_flow_statement = 32, RULE_iteration_statement = 33, RULE_selection_statement = 34, 
		RULE_if_statement = 35, RULE_switch_statement = 36, RULE_expression = 37, 
		RULE_constant_expr = 38, RULE_argument_list = 39, RULE_constant_number = 40, 
		RULE_constant = 41, RULE_primary_expression = 42, RULE_call_expression = 43, 
		RULE_unary_operator = 44, RULE_postfix_expression = 45, RULE_postfix_operator = 46, 
		RULE_declaration = 47, RULE_unary_expression = 48, RULE_lvalue = 49, RULE_full_assignment_expression = 50, 
		RULE_assignment_operator = 51, RULE_ternary_expression = 52, RULE_log_or_expression = 53, 
		RULE_log_and_expression = 54, RULE_bit_or_expression = 55, RULE_bit_xor_expression = 56, 
		RULE_bit_and_expression = 57, RULE_equality_expression = 58, RULE_comparison_expression = 59, 
		RULE_shift_expression = 60, RULE_add_expression = 61, RULE_mult_expression = 62, 
		RULE_cast_expression = 63;
	public static readonly string[] ruleNames = {
		"start", "arch_ident", "def", "isa_block_def", "isa_part", "format_def", 
		"format_field_def", "regspace_def", "reg_def", "reg_bank_def", "vector_reg_def", 
		"reg_slot_def", "insn_def", "insn_part", "match_part", "match_expr", "match_expr_part", 
		"disasm_part", "disasm_statement", "disasm_append", "disasm_format", "disasm_where", 
		"behaviour_part", "behaviour_def", "helper_def", "prototype", "parameter_list", 
		"attr", "parameter", "fnbody", "statement", "expression_statement", "flow_statement", 
		"iteration_statement", "selection_statement", "if_statement", "switch_statement", 
		"expression", "constant_expr", "argument_list", "constant_number", "constant", 
		"primary_expression", "call_expression", "unary_operator", "postfix_expression", 
		"postfix_operator", "declaration", "unary_expression", "lvalue", "full_assignment_expression", 
		"assignment_operator", "ternary_expression", "log_or_expression", "log_and_expression", 
		"bit_or_expression", "bit_xor_expression", "bit_and_expression", "equality_expression", 
		"comparison_expression", "shift_expression", "add_expression", "mult_expression", 
		"cast_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=='", "'&&'", "'noinline'", "'case'", "'default'", "'break'", 
		"'continue'", "'return'", "'while'", "'do'", "'for'", "'if'", "'else'", 
		"'switch'", "'-'", "'!'", "'++'", "'--'", "'+='", "'-='", "'&='", "'*='", 
		"'/='", "'%='", "'<<='", "'>>='", "'^='", "'|='", "'||'", "'|'", "'^'", 
		"'!='", "'<='", "'>='", "'<<<'", "'<<'", "'>>'", "'>>>'", "'/'", "'%'", 
		null, null, null, null, "':'", "';'", "'{'", "'}'", "'<'", "'>'", "'('", 
		"')'", "'['", "']'", "'='", "'+'", "','", "'.'", "'*'", "'?'", "'&'", 
		"'~'", "'arch'", "'isa'", "'format'", "'regspace'", "'bank'", "'vector'", 
		"'slot'", "'behaviour'", "'instruction'", "'match'", "'disasm'", "'append'", 
		"'where'", "'helper'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "HEX_VAL", "INT_CONST", "FLOAT_CONST", "STRING", 
		"COLON", "SEMICOLON", "LBRACE", "RBRACE", "LCHEV", "RCHEV", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "EQ", "PLUS", "COMMA", "DOT", "STAR", 
		"QMARK", "AMPERSAND", "TILDE", "ARCH", "ISA", "FORMAT", "REGSPACE", "BANK", 
		"VECTOR", "SLOT", "BEHAVIOUR", "INSTRUCTION", "MATCH", "DISASM", "APPEND", 
		"WHERE", "HELPER", "IDENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArchFile.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ArchFileParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public Arch_identContext arch_ident() {
			return GetRuleContext<Arch_identContext>(0);
		}
		public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; arch_ident();
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ISA - 64)) | (1L << (REGSPACE - 64)) | (1L << (BEHAVIOUR - 64)) | (1L << (HELPER - 64)))) != 0)) {
				{
				{
				State = 129; def();
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arch_identContext : ParserRuleContext {
		public ITerminalNode ARCH() { return GetToken(ArchFileParser.ARCH, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Arch_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arch_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterArch_ident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitArch_ident(this);
		}
	}

	[RuleVersion(0)]
	public Arch_identContext arch_ident() {
		Arch_identContext _localctx = new Arch_identContext(Context, State);
		EnterRule(_localctx, 2, RULE_arch_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(ARCH);
			State = 136; Match(IDENT);
			State = 137; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		public Isa_block_defContext isa_block_def() {
			return GetRuleContext<Isa_block_defContext>(0);
		}
		public Regspace_defContext regspace_def() {
			return GetRuleContext<Regspace_defContext>(0);
		}
		public Behaviour_defContext behaviour_def() {
			return GetRuleContext<Behaviour_defContext>(0);
		}
		public Helper_defContext helper_def() {
			return GetRuleContext<Helper_defContext>(0);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 4, RULE_def);
		try {
			State = 143;
			switch (TokenStream.La(1)) {
			case ISA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; isa_block_def();
				}
				break;
			case REGSPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; regspace_def();
				}
				break;
			case BEHAVIOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; behaviour_def();
				}
				break;
			case HELPER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142; helper_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Isa_block_defContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ISA() { return GetToken(ArchFileParser.ISA, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Isa_partContext[] isa_part() {
			return GetRuleContexts<Isa_partContext>();
		}
		public Isa_partContext isa_part(int i) {
			return GetRuleContext<Isa_partContext>(i);
		}
		public Isa_block_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isa_block_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIsa_block_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIsa_block_def(this);
		}
	}

	[RuleVersion(0)]
	public Isa_block_defContext isa_block_def() {
		Isa_block_defContext _localctx = new Isa_block_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_isa_block_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(ISA);
			State = 146; _localctx.name = Match(IDENT);
			State = 147; Match(LBRACE);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==FORMAT || _la==INSTRUCTION) {
				{
				{
				State = 148; isa_part();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 154; Match(RBRACE);
			State = 155; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Isa_partContext : ParserRuleContext {
		public Insn_defContext insn_def() {
			return GetRuleContext<Insn_defContext>(0);
		}
		public Format_defContext format_def() {
			return GetRuleContext<Format_defContext>(0);
		}
		public Isa_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isa_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIsa_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIsa_part(this);
		}
	}

	[RuleVersion(0)]
	public Isa_partContext isa_part() {
		Isa_partContext _localctx = new Isa_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_isa_part);
		try {
			State = 159;
			switch (TokenStream.La(1)) {
			case INSTRUCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; insn_def();
				}
				break;
			case FORMAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; format_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_defContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode FORMAT() { return GetToken(ArchFileParser.FORMAT, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Format_field_defContext[] format_field_def() {
			return GetRuleContexts<Format_field_defContext>();
		}
		public Format_field_defContext format_field_def(int i) {
			return GetRuleContext<Format_field_defContext>(i);
		}
		public Format_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFormat_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFormat_def(this);
		}
	}

	[RuleVersion(0)]
	public Format_defContext format_def() {
		Format_defContext _localctx = new Format_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_format_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(FORMAT);
			State = 162; _localctx.name = Match(IDENT);
			State = 163; Match(LBRACE);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (HEX_VAL - 41)) | (1L << (INT_CONST - 41)) | (1L << (FLOAT_CONST - 41)) | (1L << (IDENT - 41)))) != 0)) {
				{
				{
				State = 164; format_field_def();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 170; Match(RBRACE);
			State = 171; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_field_defContext : ParserRuleContext {
		public IToken name;
		public Constant_numberContext value;
		public Constant_numberContext width;
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Format_field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_field_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFormat_field_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFormat_field_def(this);
		}
	}

	[RuleVersion(0)]
	public Format_field_defContext format_field_def() {
		Format_field_defContext _localctx = new Format_field_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_format_field_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			switch (TokenStream.La(1)) {
			case IDENT:
				{
				State = 173; _localctx.name = Match(IDENT);
				}
				break;
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
				{
				State = 174; _localctx.value = constant_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 177; Match(COLON);
			State = 178; _localctx.width = constant_number();
			State = 179; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regspace_defContext : ParserRuleContext {
		public ITerminalNode REGSPACE() { return GetToken(ArchFileParser.REGSPACE, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Reg_defContext[] reg_def() {
			return GetRuleContexts<Reg_defContext>();
		}
		public Reg_defContext reg_def(int i) {
			return GetRuleContext<Reg_defContext>(i);
		}
		public Regspace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regspace_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterRegspace_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitRegspace_def(this);
		}
	}

	[RuleVersion(0)]
	public Regspace_defContext regspace_def() {
		Regspace_defContext _localctx = new Regspace_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_regspace_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(REGSPACE);
			State = 182; Match(LBRACE);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (BANK - 67)) | (1L << (VECTOR - 67)) | (1L << (SLOT - 67)))) != 0)) {
				{
				{
				State = 183; reg_def();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 189; Match(RBRACE);
			State = 190; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg_defContext : ParserRuleContext {
		public Reg_bank_defContext reg_bank_def() {
			return GetRuleContext<Reg_bank_defContext>(0);
		}
		public Vector_reg_defContext vector_reg_def() {
			return GetRuleContext<Vector_reg_defContext>(0);
		}
		public Reg_slot_defContext reg_slot_def() {
			return GetRuleContext<Reg_slot_defContext>(0);
		}
		public Reg_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterReg_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitReg_def(this);
		}
	}

	[RuleVersion(0)]
	public Reg_defContext reg_def() {
		Reg_defContext _localctx = new Reg_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_reg_def);
		try {
			State = 195;
			switch (TokenStream.La(1)) {
			case BANK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; reg_bank_def();
				}
				break;
			case VECTOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; vector_reg_def();
				}
				break;
			case SLOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194; reg_slot_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg_bank_defContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public Constant_numberContext count;
		public Constant_numberContext width;
		public Constant_numberContext stride;
		public Constant_numberContext offset;
		public ITerminalNode BANK() { return GetToken(ArchFileParser.BANK, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public Reg_bank_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg_bank_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterReg_bank_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitReg_bank_def(this);
		}
	}

	[RuleVersion(0)]
	public Reg_bank_defContext reg_bank_def() {
		Reg_bank_defContext _localctx = new Reg_bank_defContext(Context, State);
		EnterRule(_localctx, 18, RULE_reg_bank_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(BANK);
			State = 198; _localctx.name = Match(IDENT);
			State = 199; Match(LPAREN);
			State = 200; _localctx.type = Match(IDENT);
			State = 201; Match(COMMA);
			State = 202; _localctx.count = constant_number();
			State = 203; Match(COMMA);
			State = 204; _localctx.width = constant_number();
			State = 205; Match(COMMA);
			State = 206; _localctx.stride = constant_number();
			State = 207; Match(COMMA);
			State = 208; _localctx.offset = constant_number();
			State = 209; Match(RPAREN);
			State = 210; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vector_reg_defContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public Constant_numberContext arity;
		public Constant_numberContext count;
		public Constant_numberContext width;
		public Constant_numberContext stride;
		public Constant_numberContext offset;
		public ITerminalNode VECTOR() { return GetToken(ArchFileParser.VECTOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public Vector_reg_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector_reg_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterVector_reg_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitVector_reg_def(this);
		}
	}

	[RuleVersion(0)]
	public Vector_reg_defContext vector_reg_def() {
		Vector_reg_defContext _localctx = new Vector_reg_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_vector_reg_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(VECTOR);
			State = 213; _localctx.name = Match(IDENT);
			State = 214; Match(LPAREN);
			State = 215; _localctx.type = Match(IDENT);
			State = 216; Match(COMMA);
			State = 217; _localctx.arity = constant_number();
			State = 218; Match(COMMA);
			State = 219; _localctx.count = constant_number();
			State = 220; Match(COMMA);
			State = 221; _localctx.width = constant_number();
			State = 222; Match(COMMA);
			State = 223; _localctx.stride = constant_number();
			State = 224; Match(COMMA);
			State = 225; _localctx.offset = constant_number();
			State = 226; Match(RPAREN);
			State = 227; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg_slot_defContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public Constant_numberContext width;
		public Constant_numberContext offset;
		public IToken tag;
		public ITerminalNode SLOT() { return GetToken(ArchFileParser.SLOT, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public Reg_slot_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg_slot_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterReg_slot_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitReg_slot_def(this);
		}
	}

	[RuleVersion(0)]
	public Reg_slot_defContext reg_slot_def() {
		Reg_slot_defContext _localctx = new Reg_slot_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_reg_slot_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(SLOT);
			State = 230; _localctx.name = Match(IDENT);
			State = 231; Match(LPAREN);
			State = 232; _localctx.type = Match(IDENT);
			State = 233; Match(COMMA);
			State = 234; _localctx.width = constant_number();
			State = 235; Match(COMMA);
			State = 236; _localctx.offset = constant_number();
			State = 237; Match(RPAREN);
			State = 239;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 238; _localctx.tag = Match(IDENT);
				}
			}

			State = 241; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insn_defContext : ParserRuleContext {
		public IToken format;
		public IToken name;
		public ITerminalNode INSTRUCTION() { return GetToken(ArchFileParser.INSTRUCTION, 0); }
		public ITerminalNode LCHEV() { return GetToken(ArchFileParser.LCHEV, 0); }
		public ITerminalNode RCHEV() { return GetToken(ArchFileParser.RCHEV, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Insn_partContext[] insn_part() {
			return GetRuleContexts<Insn_partContext>();
		}
		public Insn_partContext insn_part(int i) {
			return GetRuleContext<Insn_partContext>(i);
		}
		public Insn_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insn_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterInsn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitInsn_def(this);
		}
	}

	[RuleVersion(0)]
	public Insn_defContext insn_def() {
		Insn_defContext _localctx = new Insn_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_insn_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(INSTRUCTION);
			State = 244; Match(LCHEV);
			State = 245; _localctx.format = Match(IDENT);
			State = 246; Match(RCHEV);
			State = 247; _localctx.name = Match(IDENT);
			State = 248; Match(LBRACE);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BEHAVIOUR - 70)) | (1L << (MATCH - 70)) | (1L << (DISASM - 70)))) != 0)) {
				{
				{
				State = 249; insn_part();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 255; Match(RBRACE);
			State = 256; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insn_partContext : ParserRuleContext {
		public Match_partContext match_part() {
			return GetRuleContext<Match_partContext>(0);
		}
		public Disasm_partContext disasm_part() {
			return GetRuleContext<Disasm_partContext>(0);
		}
		public Behaviour_partContext behaviour_part() {
			return GetRuleContext<Behaviour_partContext>(0);
		}
		public Insn_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insn_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterInsn_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitInsn_part(this);
		}
	}

	[RuleVersion(0)]
	public Insn_partContext insn_part() {
		Insn_partContext _localctx = new Insn_partContext(Context, State);
		EnterRule(_localctx, 26, RULE_insn_part);
		try {
			State = 261;
			switch (TokenStream.La(1)) {
			case MATCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; match_part();
				}
				break;
			case DISASM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; disasm_part();
				}
				break;
			case BEHAVIOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; behaviour_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_partContext : ParserRuleContext {
		public ITerminalNode MATCH() { return GetToken(ArchFileParser.MATCH, 0); }
		public Match_exprContext match_expr() {
			return GetRuleContext<Match_exprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Match_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterMatch_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitMatch_part(this);
		}
	}

	[RuleVersion(0)]
	public Match_partContext match_part() {
		Match_partContext _localctx = new Match_partContext(Context, State);
		EnterRule(_localctx, 28, RULE_match_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(MATCH);
			State = 264; match_expr();
			State = 265; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_exprContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public Match_expr_partContext match_expr_part() {
			return GetRuleContext<Match_expr_partContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public Match_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterMatch_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitMatch_expr(this);
		}
	}

	[RuleVersion(0)]
	public Match_exprContext match_expr() {
		Match_exprContext _localctx = new Match_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_match_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(LPAREN);
			State = 268; match_expr_part(0);
			State = 269; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_expr_partContext : ParserRuleContext {
		public Match_expr_partContext lhs;
		public IToken field;
		public IToken S;
		public Constant_numberContext value;
		public Match_expr_partContext rhs;
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Constant_numberContext constant_number() {
			return GetRuleContext<Constant_numberContext>(0);
		}
		public Match_expr_partContext[] match_expr_part() {
			return GetRuleContexts<Match_expr_partContext>();
		}
		public Match_expr_partContext match_expr_part(int i) {
			return GetRuleContext<Match_expr_partContext>(i);
		}
		public Match_expr_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expr_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterMatch_expr_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitMatch_expr_part(this);
		}
	}

	[RuleVersion(0)]
	public Match_expr_partContext match_expr_part() {
		return match_expr_part(0);
	}

	private Match_expr_partContext match_expr_part(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Match_expr_partContext _localctx = new Match_expr_partContext(Context, _parentState);
		Match_expr_partContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_match_expr_part, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 272; _localctx.field = Match(IDENT);
			State = 273; _localctx.S = Match(T__0);
			State = 274; _localctx.value = constant_number();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Match_expr_partContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_match_expr_part);
					State = 276;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 277; _localctx.S = Match(T__1);
					State = 278; _localctx.rhs = match_expr_part(2);
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Disasm_partContext : ParserRuleContext {
		public ITerminalNode DISASM() { return GetToken(ArchFileParser.DISASM, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Disasm_statementContext[] disasm_statement() {
			return GetRuleContexts<Disasm_statementContext>();
		}
		public Disasm_statementContext disasm_statement(int i) {
			return GetRuleContext<Disasm_statementContext>(i);
		}
		public Disasm_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disasm_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDisasm_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDisasm_part(this);
		}
	}

	[RuleVersion(0)]
	public Disasm_partContext disasm_part() {
		Disasm_partContext _localctx = new Disasm_partContext(Context, State);
		EnterRule(_localctx, 34, RULE_disasm_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(DISASM);
			State = 285; Match(LBRACE);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==APPEND || _la==WHERE) {
				{
				{
				State = 286; disasm_statement();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 292; Match(RBRACE);
			State = 293; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disasm_statementContext : ParserRuleContext {
		public Disasm_appendContext disasm_append() {
			return GetRuleContext<Disasm_appendContext>(0);
		}
		public Disasm_whereContext disasm_where() {
			return GetRuleContext<Disasm_whereContext>(0);
		}
		public Disasm_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disasm_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDisasm_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDisasm_statement(this);
		}
	}

	[RuleVersion(0)]
	public Disasm_statementContext disasm_statement() {
		Disasm_statementContext _localctx = new Disasm_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_disasm_statement);
		try {
			State = 297;
			switch (TokenStream.La(1)) {
			case APPEND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295; disasm_append();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296; disasm_where();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disasm_appendContext : ParserRuleContext {
		public ITerminalNode APPEND() { return GetToken(ArchFileParser.APPEND, 0); }
		public Disasm_formatContext disasm_format() {
			return GetRuleContext<Disasm_formatContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Disasm_appendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disasm_append; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDisasm_append(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDisasm_append(this);
		}
	}

	[RuleVersion(0)]
	public Disasm_appendContext disasm_append() {
		Disasm_appendContext _localctx = new Disasm_appendContext(Context, State);
		EnterRule(_localctx, 38, RULE_disasm_append);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(APPEND);
			State = 300; disasm_format();
			State = 301; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disasm_formatContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode STRING() { return GetToken(ArchFileParser.STRING, 0); }
		public ITerminalNode TILDE() { return GetToken(ArchFileParser.TILDE, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Disasm_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disasm_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDisasm_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDisasm_format(this);
		}
	}

	[RuleVersion(0)]
	public Disasm_formatContext disasm_format() {
		Disasm_formatContext _localctx = new Disasm_formatContext(Context, State);
		EnterRule(_localctx, 40, RULE_disasm_format);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; _localctx.text = Match(STRING);
			State = 315;
			_la = TokenStream.La(1);
			if (_la==TILDE) {
				{
				State = 304; Match(TILDE);
				State = 305; Match(LPAREN);
				State = 306; Match(IDENT);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 307; Match(COMMA);
					State = 308; Match(IDENT);
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 314; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disasm_whereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(ArchFileParser.WHERE, 0); }
		public Match_exprContext match_expr() {
			return GetRuleContext<Match_exprContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Disasm_statementContext[] disasm_statement() {
			return GetRuleContexts<Disasm_statementContext>();
		}
		public Disasm_statementContext disasm_statement(int i) {
			return GetRuleContext<Disasm_statementContext>(i);
		}
		public Disasm_whereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disasm_where; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDisasm_where(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDisasm_where(this);
		}
	}

	[RuleVersion(0)]
	public Disasm_whereContext disasm_where() {
		Disasm_whereContext _localctx = new Disasm_whereContext(Context, State);
		EnterRule(_localctx, 42, RULE_disasm_where);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(WHERE);
			State = 318; match_expr();
			State = 319; Match(LBRACE);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==APPEND || _la==WHERE) {
				{
				{
				State = 320; disasm_statement();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 326; Match(RBRACE);
			State = 327; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Behaviour_partContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode BEHAVIOUR() { return GetToken(ArchFileParser.BEHAVIOUR, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Behaviour_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviour_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBehaviour_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBehaviour_part(this);
		}
	}

	[RuleVersion(0)]
	public Behaviour_partContext behaviour_part() {
		Behaviour_partContext _localctx = new Behaviour_partContext(Context, State);
		EnterRule(_localctx, 44, RULE_behaviour_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(BEHAVIOUR);
			State = 330; _localctx.name = Match(IDENT);
			State = 331; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Behaviour_defContext : ParserRuleContext {
		public IToken isa;
		public IToken type;
		public IToken name;
		public ITerminalNode BEHAVIOUR() { return GetToken(ArchFileParser.BEHAVIOUR, 0); }
		public ITerminalNode LCHEV() { return GetToken(ArchFileParser.LCHEV, 0); }
		public ITerminalNode DOT() { return GetToken(ArchFileParser.DOT, 0); }
		public ITerminalNode RCHEV() { return GetToken(ArchFileParser.RCHEV, 0); }
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Behaviour_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviour_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBehaviour_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBehaviour_def(this);
		}
	}

	[RuleVersion(0)]
	public Behaviour_defContext behaviour_def() {
		Behaviour_defContext _localctx = new Behaviour_defContext(Context, State);
		EnterRule(_localctx, 46, RULE_behaviour_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(BEHAVIOUR);
			State = 334; Match(LCHEV);
			State = 335; _localctx.isa = Match(IDENT);
			State = 336; Match(DOT);
			State = 337; _localctx.type = Match(IDENT);
			State = 338; Match(RCHEV);
			State = 339; _localctx.name = Match(IDENT);
			State = 340; fnbody();
			State = 341; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Helper_defContext : ParserRuleContext {
		public ITerminalNode HELPER() { return GetToken(ArchFileParser.HELPER, 0); }
		public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Helper_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helper_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterHelper_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitHelper_def(this);
		}
	}

	[RuleVersion(0)]
	public Helper_defContext helper_def() {
		Helper_defContext _localctx = new Helper_defContext(Context, State);
		EnterRule(_localctx, 48, RULE_helper_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(HELPER);
			State = 344; prototype();
			State = 345; fnbody();
			State = 346; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		public IToken rtype;
		public IToken name;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; _localctx.rtype = Match(IDENT);
			State = 349; _localctx.name = Match(IDENT);
			State = 350; Match(LPAREN);
			State = 352;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 351; parameter_list();
				}
			}

			State = 354; Match(RPAREN);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2) {
				{
				{
				State = 355; attr();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; parameter();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 362; Match(COMMA);
				State = 363; parameter();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public IToken T;
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 54, RULE_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; _localctx.T = Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken type;
		public IToken @ref;
		public IToken name;
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(ArchFileParser.AMPERSAND, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; _localctx.type = Match(IDENT);
			State = 373;
			_la = TokenStream.La(1);
			if (_la==AMPERSAND) {
				{
				State = 372; _localctx.@ref = Match(AMPERSAND);
				}
			}

			State = 375; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnbodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FnbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFnbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFnbody(this);
		}
	}

	[RuleVersion(0)]
	public FnbodyContext fnbody() {
		FnbodyContext _localctx = new FnbodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_fnbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(LBRACE);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << HEX_VAL) | (1L << INT_CONST) | (1L << FLOAT_CONST) | (1L << STRING) | (1L << SEMICOLON) | (1L << LBRACE) | (1L << LPAREN) | (1L << PLUS) | (1L << STAR) | (1L << AMPERSAND) | (1L << TILDE))) != 0) || _la==IDENT) {
				{
				{
				State = 378; statement();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 384; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Flow_statementContext flow_statement() {
			return GetRuleContext<Flow_statementContext>(0);
		}
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			State = 391;
			switch (TokenStream.La(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case SEMICOLON:
			case LPAREN:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case TILDE:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; expression_statement();
				}
				break;
			case T__11:
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; selection_statement();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 388; iteration_statement();
				}
				break;
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 389; flow_statement();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 390; fnbody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_expression_statement);
		try {
			State = 397;
			switch (TokenStream.La(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; Match(SEMICOLON);
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case LPAREN:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case TILDE:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; expression();
				State = 395; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_statementContext : ParserRuleContext {
		public IToken S;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Flow_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFlow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFlow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Flow_statementContext flow_statement() {
		Flow_statementContext _localctx = new Flow_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_flow_statement);
		int _la;
		try {
			State = 416;
			switch (TokenStream.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399; _localctx.S = Match(T__3);
				State = 400; constant();
				State = 401; Match(COLON);
				State = 402; statement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; _localctx.S = Match(T__4);
				State = 405; Match(COLON);
				State = 406; statement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; _localctx.S = Match(T__5);
				State = 408; Match(SEMICOLON);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 409; _localctx.S = Match(T__6);
				State = 410; Match(SEMICOLON);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 411; _localctx.S = Match(T__7);
				State = 413;
				_la = TokenStream.La(1);
				if (((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & ((1L << (T__14 - 15)) | (1L << (T__15 - 15)) | (1L << (T__16 - 15)) | (1L << (T__17 - 15)) | (1L << (HEX_VAL - 15)) | (1L << (INT_CONST - 15)) | (1L << (FLOAT_CONST - 15)) | (1L << (STRING - 15)) | (1L << (LPAREN - 15)) | (1L << (PLUS - 15)) | (1L << (STAR - 15)) | (1L << (AMPERSAND - 15)) | (1L << (TILDE - 15)) | (1L << (IDENT - 15)))) != 0)) {
					{
					State = 412; expression();
					}
				}

				State = 415; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(ArchFileParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(ArchFileParser.SEMICOLON, i);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_iteration_statement);
		int _la;
		try {
			State = 447;
			switch (TokenStream.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; Match(T__8);
				State = 419; Match(LPAREN);
				State = 420; expression();
				State = 421; Match(RPAREN);
				State = 422; statement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424; Match(T__9);
				State = 425; statement();
				State = 426; Match(T__8);
				State = 427; Match(LPAREN);
				State = 428; expression();
				State = 429; Match(RPAREN);
				State = 430; Match(SEMICOLON);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 432; Match(T__10);
				State = 433; Match(LPAREN);
				State = 435;
				_la = TokenStream.La(1);
				if (((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & ((1L << (T__14 - 15)) | (1L << (T__15 - 15)) | (1L << (T__16 - 15)) | (1L << (T__17 - 15)) | (1L << (HEX_VAL - 15)) | (1L << (INT_CONST - 15)) | (1L << (FLOAT_CONST - 15)) | (1L << (STRING - 15)) | (1L << (LPAREN - 15)) | (1L << (PLUS - 15)) | (1L << (STAR - 15)) | (1L << (AMPERSAND - 15)) | (1L << (TILDE - 15)) | (1L << (IDENT - 15)))) != 0)) {
					{
					State = 434; expression();
					}
				}

				State = 437; Match(SEMICOLON);
				State = 439;
				_la = TokenStream.La(1);
				if (((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & ((1L << (T__14 - 15)) | (1L << (T__15 - 15)) | (1L << (T__16 - 15)) | (1L << (T__17 - 15)) | (1L << (HEX_VAL - 15)) | (1L << (INT_CONST - 15)) | (1L << (FLOAT_CONST - 15)) | (1L << (STRING - 15)) | (1L << (LPAREN - 15)) | (1L << (PLUS - 15)) | (1L << (STAR - 15)) | (1L << (AMPERSAND - 15)) | (1L << (TILDE - 15)) | (1L << (IDENT - 15)))) != 0)) {
					{
					State = 438; expression();
					}
				}

				State = 441; Match(SEMICOLON);
				State = 443;
				_la = TokenStream.La(1);
				if (((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & ((1L << (T__14 - 15)) | (1L << (T__15 - 15)) | (1L << (T__16 - 15)) | (1L << (T__17 - 15)) | (1L << (HEX_VAL - 15)) | (1L << (INT_CONST - 15)) | (1L << (FLOAT_CONST - 15)) | (1L << (STRING - 15)) | (1L << (LPAREN - 15)) | (1L << (PLUS - 15)) | (1L << (STAR - 15)) | (1L << (AMPERSAND - 15)) | (1L << (TILDE - 15)) | (1L << (IDENT - 15)))) != 0)) {
					{
					State = 442; expression();
					}
				}

				State = 445; Match(RPAREN);
				State = 446; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_selection_statement);
		try {
			State = 451;
			switch (TokenStream.La(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 449; if_statement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450; switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public IToken KW;
		public ExpressionContext cond;
		public StatementContext tt;
		public StatementContext ft;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; _localctx.KW = Match(T__11);
			State = 454; Match(LPAREN);
			State = 455; _localctx.cond = expression();
			State = 456; Match(RPAREN);
			State = 457; _localctx.tt = statement();
			State = 460;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 458; Match(T__12);
				State = 459; _localctx.ft = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public IToken KW;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; _localctx.KW = Match(T__13);
			State = 463; Match(LPAREN);
			State = 464; expression();
			State = 465; Match(RPAREN);
			State = 466; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Ternary_expressionContext rvalue;
		public Ternary_expressionContext expr;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Ternary_expressionContext[] ternary_expression() {
			return GetRuleContexts<Ternary_expressionContext>();
		}
		public Ternary_expressionContext ternary_expression(int i) {
			return GetRuleContext<Ternary_expressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_expression);
		int _la;
		try {
			State = 480;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; declaration();
				State = 472;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << EQ))) != 0)) {
					{
					State = 469; assignment_operator();
					State = 470; _localctx.rvalue = ternary_expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; _localctx.expr = ternary_expression();
				State = 478;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << EQ))) != 0)) {
					{
					State = 475; assignment_operator();
					State = 476; _localctx.rvalue = ternary_expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_exprContext : ParserRuleContext {
		public Log_or_expressionContext log_or_expression() {
			return GetRuleContext<Log_or_expressionContext>(0);
		}
		public Constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Constant_exprContext constant_expr() {
		Constant_exprContext _localctx = new Constant_exprContext(Context, State);
		EnterRule(_localctx, 76, RULE_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; log_or_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 78, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			_la = TokenStream.La(1);
			if (((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & ((1L << (T__14 - 15)) | (1L << (T__15 - 15)) | (1L << (T__16 - 15)) | (1L << (T__17 - 15)) | (1L << (HEX_VAL - 15)) | (1L << (INT_CONST - 15)) | (1L << (FLOAT_CONST - 15)) | (1L << (STRING - 15)) | (1L << (LPAREN - 15)) | (1L << (PLUS - 15)) | (1L << (STAR - 15)) | (1L << (AMPERSAND - 15)) | (1L << (TILDE - 15)) | (1L << (IDENT - 15)))) != 0)) {
				{
				State = 484; expression();
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 485; Match(COMMA);
					State = 486; expression();
					}
					}
					State = 491;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_numberContext : ParserRuleContext {
		public ITerminalNode HEX_VAL() { return GetToken(ArchFileParser.HEX_VAL, 0); }
		public ITerminalNode INT_CONST() { return GetToken(ArchFileParser.INT_CONST, 0); }
		public ITerminalNode FLOAT_CONST() { return GetToken(ArchFileParser.FLOAT_CONST, 0); }
		public Constant_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant_number(this);
		}
	}

	[RuleVersion(0)]
	public Constant_numberContext constant_number() {
		Constant_numberContext _localctx = new Constant_numberContext(Context, State);
		EnterRule(_localctx, 80, RULE_constant_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HEX_VAL) | (1L << INT_CONST) | (1L << FLOAT_CONST))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public Constant_numberContext constant_number() {
			return GetRuleContext<Constant_numberContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(ArchFileParser.STRING, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 82, RULE_constant);
		try {
			State = 498;
			switch (TokenStream.La(1)) {
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 496; constant_number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public IToken sym;
		public ConstantContext imm;
		public ExpressionContext expr;
		public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_primary_expression);
		try {
			State = 507;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500; call_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501; _localctx.sym = Match(IDENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 502; _localctx.imm = constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 503; Match(LPAREN);
				State = 504; _localctx.expr = expression();
				State = 505; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public IToken fn;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		Call_expressionContext _localctx = new Call_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_call_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; _localctx.fn = Match(IDENT);
			State = 510; Match(LPAREN);
			State = 511; argument_list();
			State = 512; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << PLUS) | (1L << STAR) | (1L << AMPERSAND) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Postfix_operatorContext postfix_operator() {
			return GetRuleContext<Postfix_operatorContext>(0);
		}
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPostfix_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPostfix_expression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_postfix_expression);
		try {
			State = 520;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 516; primary_expression();
				State = 517; postfix_operator();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; primary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_operatorContext : ParserRuleContext {
		public IToken member;
		public IToken symbol;
		public ITerminalNode LBRACKET() { return GetToken(ArchFileParser.LBRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(ArchFileParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(ArchFileParser.DOT, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode STAR() { return GetToken(ArchFileParser.STAR, 0); }
		public Postfix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPostfix_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPostfix_operator(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_operatorContext postfix_operator() {
		Postfix_operatorContext _localctx = new Postfix_operatorContext(Context, State);
		EnterRule(_localctx, 92, RULE_postfix_operator);
		try {
			State = 532;
			switch (TokenStream.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522; Match(LBRACKET);
				State = 523; expression();
				State = 524; Match(RBRACKET);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526; Match(DOT);
				State = 527; _localctx.member = Match(IDENT);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 528; Match(STAR);
				State = 529; _localctx.symbol = Match(IDENT);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 4);
				{
				State = 530; Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 5);
				{
				State = 531; Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public IToken type;
		public IToken name;
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; _localctx.type = Match(IDENT);
			State = 535; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_unary_expression);
		try {
			State = 545;
			switch (TokenStream.La(1)) {
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case LPAREN:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537; postfix_expression();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538; Match(T__16);
				State = 539; unary_expression();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 540; Match(T__17);
				State = 541; unary_expression();
				}
				break;
			case T__14:
			case T__15:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case TILDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 542; unary_operator();
				State = 543; cast_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLvalue(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 98, RULE_lvalue);
		try {
			State = 549;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 547; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_assignment_expressionContext : ParserRuleContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Ternary_expressionContext ternary_expression() {
			return GetRuleContext<Ternary_expressionContext>(0);
		}
		public Full_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFull_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFull_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Full_assignment_expressionContext full_assignment_expression() {
		Full_assignment_expressionContext _localctx = new Full_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_full_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; lvalue();
			State = 552; assignment_operator();
			State = 553; ternary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public IToken S;
		public ITerminalNode EQ() { return GetToken(ArchFileParser.EQ, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_assignment_operator);
		try {
			State = 566;
			switch (TokenStream.La(1)) {
			case EQ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555; _localctx.S = Match(EQ);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556; _localctx.S = Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557; _localctx.S = Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 558; _localctx.S = Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 559; _localctx.S = Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 6);
				{
				State = 560; _localctx.S = Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 7);
				{
				State = 561; _localctx.S = Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 8);
				{
				State = 562; _localctx.S = Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 9);
				{
				State = 563; _localctx.S = Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 10);
				{
				State = 564; _localctx.S = Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 11);
				{
				State = 565; _localctx.S = Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ternary_expressionContext : ParserRuleContext {
		public Log_or_expressionContext cond;
		public Log_or_expressionContext left;
		public Log_or_expressionContext right;
		public Log_or_expressionContext[] log_or_expression() {
			return GetRuleContexts<Log_or_expressionContext>();
		}
		public Log_or_expressionContext log_or_expression(int i) {
			return GetRuleContext<Log_or_expressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(ArchFileParser.QMARK, 0); }
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public Ternary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterTernary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitTernary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ternary_expressionContext ternary_expression() {
		Ternary_expressionContext _localctx = new Ternary_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_ternary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; _localctx.cond = log_or_expression();
			State = 574;
			_la = TokenStream.La(1);
			if (_la==QMARK) {
				{
				State = 569; Match(QMARK);
				State = 570; _localctx.left = log_or_expression();
				State = 571; Match(COLON);
				State = 572; _localctx.right = log_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_or_expressionContext : ParserRuleContext {
		public Log_and_expressionContext L;
		public IToken P;
		public Log_and_expressionContext R;
		public Log_and_expressionContext[] log_and_expression() {
			return GetRuleContexts<Log_and_expressionContext>();
		}
		public Log_and_expressionContext log_and_expression(int i) {
			return GetRuleContext<Log_and_expressionContext>(i);
		}
		public Log_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLog_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLog_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Log_or_expressionContext log_or_expression() {
		Log_or_expressionContext _localctx = new Log_or_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_log_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576; _localctx.L = log_and_expression();
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__28) {
				{
				{
				State = 577; _localctx.P = Match(T__28);
				State = 578; _localctx.R = log_and_expression();
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_and_expressionContext : ParserRuleContext {
		public Bit_or_expressionContext L;
		public IToken P;
		public Bit_or_expressionContext R;
		public Bit_or_expressionContext[] bit_or_expression() {
			return GetRuleContexts<Bit_or_expressionContext>();
		}
		public Bit_or_expressionContext bit_or_expression(int i) {
			return GetRuleContext<Bit_or_expressionContext>(i);
		}
		public Log_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLog_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLog_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Log_and_expressionContext log_and_expression() {
		Log_and_expressionContext _localctx = new Log_and_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_log_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584; _localctx.L = bit_or_expression();
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__1) {
				{
				{
				State = 585; _localctx.P = Match(T__1);
				State = 586; _localctx.R = bit_or_expression();
				}
				}
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_or_expressionContext : ParserRuleContext {
		public Bit_xor_expressionContext L;
		public IToken P;
		public Bit_xor_expressionContext R;
		public Bit_xor_expressionContext[] bit_xor_expression() {
			return GetRuleContexts<Bit_xor_expressionContext>();
		}
		public Bit_xor_expressionContext bit_xor_expression(int i) {
			return GetRuleContext<Bit_xor_expressionContext>(i);
		}
		public Bit_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_expressionContext bit_or_expression() {
		Bit_or_expressionContext _localctx = new Bit_or_expressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_bit_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; _localctx.L = bit_xor_expression();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__29) {
				{
				{
				State = 593; _localctx.P = Match(T__29);
				State = 594; _localctx.R = bit_xor_expression();
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_xor_expressionContext : ParserRuleContext {
		public Bit_and_expressionContext L;
		public IToken P;
		public Bit_and_expressionContext R;
		public Bit_and_expressionContext[] bit_and_expression() {
			return GetRuleContexts<Bit_and_expressionContext>();
		}
		public Bit_and_expressionContext bit_and_expression(int i) {
			return GetRuleContext<Bit_and_expressionContext>(i);
		}
		public Bit_xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_xor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_xor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_xor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_xor_expressionContext bit_xor_expression() {
		Bit_xor_expressionContext _localctx = new Bit_xor_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_bit_xor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; _localctx.L = bit_and_expression();
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__30) {
				{
				{
				State = 601; _localctx.P = Match(T__30);
				State = 602; _localctx.R = bit_and_expression();
				}
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		public Equality_expressionContext L;
		public IToken P;
		public Equality_expressionContext R;
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_bit_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; _localctx.L = equality_expression();
			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AMPERSAND) {
				{
				{
				State = 609; _localctx.P = Match(AMPERSAND);
				State = 610; _localctx.R = equality_expression();
				}
				}
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Comparison_expressionContext L;
		public IToken P;
		public Comparison_expressionContext R;
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; _localctx.L = comparison_expression();
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0 || _la==T__31) {
				{
				{
				State = 617;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==T__0 || _la==T__31) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 618; _localctx.R = comparison_expression();
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Shift_expressionContext L;
		public IToken P;
		public Shift_expressionContext R;
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_comparison_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; _localctx.L = shift_expression();
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << LCHEV) | (1L << RCHEV))) != 0)) {
				{
				{
				State = 625;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << LCHEV) | (1L << RCHEV))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 626; _localctx.R = shift_expression();
				}
				}
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Add_expressionContext L;
		public IToken P;
		public Add_expressionContext R;
		public Add_expressionContext[] add_expression() {
			return GetRuleContexts<Add_expressionContext>();
		}
		public Add_expressionContext add_expression(int i) {
			return GetRuleContext<Add_expressionContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_shift_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; _localctx.L = add_expression();
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) {
				{
				{
				State = 633;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 634; _localctx.R = add_expression();
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_expressionContext : ParserRuleContext {
		public Mult_expressionContext L;
		public IToken P;
		public Mult_expressionContext R;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Add_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAdd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAdd_expression(this);
		}
	}

	[RuleVersion(0)]
	public Add_expressionContext add_expression() {
		Add_expressionContext _localctx = new Add_expressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_add_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; _localctx.L = mult_expression();
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__14 || _la==PLUS) {
				{
				{
				State = 641;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==T__14 || _la==PLUS) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 642; _localctx.R = mult_expression();
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_expressionContext : ParserRuleContext {
		public Cast_expressionContext L;
		public IToken P;
		public Cast_expressionContext R;
		public Cast_expressionContext[] cast_expression() {
			return GetRuleContexts<Cast_expressionContext>();
		}
		public Cast_expressionContext cast_expression(int i) {
			return GetRuleContext<Cast_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; _localctx.L = cast_expression();
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__38) | (1L << T__39) | (1L << STAR))) != 0)) {
				{
				{
				State = 649;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__38) | (1L << T__39) | (1L << STAR))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 650; _localctx.R = cast_expression();
				}
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public IToken type;
		public Unary_expressionContext expr;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_cast_expression);
		try {
			State = 661;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656; Match(LPAREN);
				State = 657; _localctx.type = Match(IDENT);
				State = 658; Match(RPAREN);
				State = 659; cast_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 660; _localctx.expr = unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return match_expr_part_sempred((Match_expr_partContext)_localctx, predIndex);
		}
		return true;
	}
	private bool match_expr_part_sempred(Match_expr_partContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3P\x29A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x3\x2\x3\x2\a\x2\x85\n\x2\f\x2\xE\x2\x88\v\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x92\n\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\a\x5\x98\n\x5\f\x5\xE\x5\x9B\v\x5\x3\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x5\x6\xA2\n\x6\x3\a\x3\a\x3\a\x3\a\a\a\xA8\n\a\f\a\xE\a\xAB\v\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x5\b\xB2\n\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\a\t\xBB\n\t\f\t\xE\t\xBE\v\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x5\n\xC6"+
		"\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x5\r\xF2\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\a\xE\xFD\n\xE\f\xE\xE\xE\x100\v\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x108\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x11A\n"+
		"\x12\f\x12\xE\x12\x11D\v\x12\x3\x13\x3\x13\x3\x13\a\x13\x122\n\x13\f\x13"+
		"\xE\x13\x125\v\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\x12C\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\a\x16\x138\n\x16\f\x16\xE\x16\x13B\v\x16\x3\x16\x5\x16\x13E\n\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\a\x17\x144\n\x17\f\x17\xE\x17\x147\v\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x163\n\x1B\x3\x1B\x3\x1B"+
		"\a\x1B\x167\n\x1B\f\x1B\xE\x1B\x16A\v\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x16F"+
		"\n\x1C\f\x1C\xE\x1C\x172\v\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x178"+
		"\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\a\x1F\x17E\n\x1F\f\x1F\xE\x1F\x181"+
		"\v\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x5 \x18A\n \x3!\x3!\x3!\x3!\x5"+
		"!\x190\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x5\"\x1A0\n\"\x3\"\x5\"\x1A3\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x1B6\n#\x3#\x3#\x5#\x1BA"+
		"\n#\x3#\x3#\x5#\x1BE\n#\x3#\x3#\x5#\x1C2\n#\x3$\x3$\x5$\x1C6\n$\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x5%\x1CF\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3"+
		"\'\x3\'\x5\'\x1DB\n\'\x3\'\x3\'\x3\'\x3\'\x5\'\x1E1\n\'\x5\'\x1E3\n\'"+
		"\x3(\x3(\x3)\x3)\x3)\a)\x1EA\n)\f)\xE)\x1ED\v)\x5)\x1EF\n)\x3*\x3*\x3"+
		"+\x3+\x5+\x1F5\n+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x1FE\n,\x3-\x3-\x3-"+
		"\x3-\x3-\x3.\x3.\x3/\x3/\x3/\x3/\x5/\x20B\n/\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x217\n\x30\x3\x31\x3"+
		"\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x224\n\x32\x3\x33\x3\x33\x5\x33\x228\n\x33\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x5\x35\x239\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x5\x36\x241\n\x36\x3\x37\x3\x37\x3\x37\a\x37\x246\n\x37\f\x37\xE\x37"+
		"\x249\v\x37\x3\x38\x3\x38\x3\x38\a\x38\x24E\n\x38\f\x38\xE\x38\x251\v"+
		"\x38\x3\x39\x3\x39\x3\x39\a\x39\x256\n\x39\f\x39\xE\x39\x259\v\x39\x3"+
		":\x3:\x3:\a:\x25E\n:\f:\xE:\x261\v:\x3;\x3;\x3;\a;\x266\n;\f;\xE;\x269"+
		"\v;\x3<\x3<\x3<\a<\x26E\n<\f<\xE<\x271\v<\x3=\x3=\x3=\a=\x276\n=\f=\xE"+
		"=\x279\v=\x3>\x3>\x3>\a>\x27E\n>\f>\xE>\x281\v>\x3?\x3?\x3?\a?\x286\n"+
		"?\f?\xE?\x289\v?\x3@\x3@\x3@\a@\x28E\n@\f@\xE@\x291\v@\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x298\n\x41\x3\x41\x2\x3\"\x42\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x2\t\x3\x2+-\x6\x2"+
		"\x11\x12::==?@\x4\x2\x3\x3\"\"\x4\x2#$\x33\x34\x3\x2%(\x4\x2\x11\x11:"+
		":\x4\x2)*==\x2AC\x2\x82\x3\x2\x2\x2\x4\x89\x3\x2\x2\x2\x6\x91\x3\x2\x2"+
		"\x2\b\x93\x3\x2\x2\x2\n\xA1\x3\x2\x2\x2\f\xA3\x3\x2\x2\x2\xE\xB1\x3\x2"+
		"\x2\x2\x10\xB7\x3\x2\x2\x2\x12\xC5\x3\x2\x2\x2\x14\xC7\x3\x2\x2\x2\x16"+
		"\xD6\x3\x2\x2\x2\x18\xE7\x3\x2\x2\x2\x1A\xF5\x3\x2\x2\x2\x1C\x107\x3\x2"+
		"\x2\x2\x1E\x109\x3\x2\x2\x2 \x10D\x3\x2\x2\x2\"\x111\x3\x2\x2\x2$\x11E"+
		"\x3\x2\x2\x2&\x12B\x3\x2\x2\x2(\x12D\x3\x2\x2\x2*\x131\x3\x2\x2\x2,\x13F"+
		"\x3\x2\x2\x2.\x14B\x3\x2\x2\x2\x30\x14F\x3\x2\x2\x2\x32\x159\x3\x2\x2"+
		"\x2\x34\x15E\x3\x2\x2\x2\x36\x16B\x3\x2\x2\x2\x38\x173\x3\x2\x2\x2:\x175"+
		"\x3\x2\x2\x2<\x17B\x3\x2\x2\x2>\x189\x3\x2\x2\x2@\x18F\x3\x2\x2\x2\x42"+
		"\x1A2\x3\x2\x2\x2\x44\x1C1\x3\x2\x2\x2\x46\x1C5\x3\x2\x2\x2H\x1C7\x3\x2"+
		"\x2\x2J\x1D0\x3\x2\x2\x2L\x1E2\x3\x2\x2\x2N\x1E4\x3\x2\x2\x2P\x1EE\x3"+
		"\x2\x2\x2R\x1F0\x3\x2\x2\x2T\x1F4\x3\x2\x2\x2V\x1FD\x3\x2\x2\x2X\x1FF"+
		"\x3\x2\x2\x2Z\x204\x3\x2\x2\x2\\\x20A\x3\x2\x2\x2^\x216\x3\x2\x2\x2`\x218"+
		"\x3\x2\x2\x2\x62\x223\x3\x2\x2\x2\x64\x227\x3\x2\x2\x2\x66\x229\x3\x2"+
		"\x2\x2h\x238\x3\x2\x2\x2j\x23A\x3\x2\x2\x2l\x242\x3\x2\x2\x2n\x24A\x3"+
		"\x2\x2\x2p\x252\x3\x2\x2\x2r\x25A\x3\x2\x2\x2t\x262\x3\x2\x2\x2v\x26A"+
		"\x3\x2\x2\x2x\x272\x3\x2\x2\x2z\x27A\x3\x2\x2\x2|\x282\x3\x2\x2\x2~\x28A"+
		"\x3\x2\x2\x2\x80\x297\x3\x2\x2\x2\x82\x86\x5\x4\x3\x2\x83\x85\x5\x6\x4"+
		"\x2\x84\x83\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87"+
		"\x3\x2\x2\x2\x87\x3\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x89\x8A\a\x41\x2\x2"+
		"\x8A\x8B\aO\x2\x2\x8B\x8C\a\x30\x2\x2\x8C\x5\x3\x2\x2\x2\x8D\x92\x5\b"+
		"\x5\x2\x8E\x92\x5\x10\t\x2\x8F\x92\x5\x30\x19\x2\x90\x92\x5\x32\x1A\x2"+
		"\x91\x8D\x3\x2\x2\x2\x91\x8E\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x90\x3"+
		"\x2\x2\x2\x92\a\x3\x2\x2\x2\x93\x94\a\x42\x2\x2\x94\x95\aO\x2\x2\x95\x99"+
		"\a\x31\x2\x2\x96\x98\x5\n\x6\x2\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2"+
		"\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x99\x3"+
		"\x2\x2\x2\x9C\x9D\a\x32\x2\x2\x9D\x9E\a\x30\x2\x2\x9E\t\x3\x2\x2\x2\x9F"+
		"\xA2\x5\x1A\xE\x2\xA0\xA2\x5\f\a\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA0\x3\x2"+
		"\x2\x2\xA2\v\x3\x2\x2\x2\xA3\xA4\a\x43\x2\x2\xA4\xA5\aO\x2\x2\xA5\xA9"+
		"\a\x31\x2\x2\xA6\xA8\x5\xE\b\x2\xA7\xA6\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2"+
		"\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAC\x3\x2\x2\x2\xAB\xA9\x3"+
		"\x2\x2\x2\xAC\xAD\a\x32\x2\x2\xAD\xAE\a\x30\x2\x2\xAE\r\x3\x2\x2\x2\xAF"+
		"\xB2\aO\x2\x2\xB0\xB2\x5R*\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB0\x3\x2\x2\x2"+
		"\xB2\xB3\x3\x2\x2\x2\xB3\xB4\a/\x2\x2\xB4\xB5\x5R*\x2\xB5\xB6\a\x30\x2"+
		"\x2\xB6\xF\x3\x2\x2\x2\xB7\xB8\a\x44\x2\x2\xB8\xBC\a\x31\x2\x2\xB9\xBB"+
		"\x5\x12\n\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2"+
		"\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC0"+
		"\a\x32\x2\x2\xC0\xC1\a\x30\x2\x2\xC1\x11\x3\x2\x2\x2\xC2\xC6\x5\x14\v"+
		"\x2\xC3\xC6\x5\x16\f\x2\xC4\xC6\x5\x18\r\x2\xC5\xC2\x3\x2\x2\x2\xC5\xC3"+
		"\x3\x2\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6\x13\x3\x2\x2\x2\xC7\xC8\a\x45\x2"+
		"\x2\xC8\xC9\aO\x2\x2\xC9\xCA\a\x35\x2\x2\xCA\xCB\aO\x2\x2\xCB\xCC\a;\x2"+
		"\x2\xCC\xCD\x5R*\x2\xCD\xCE\a;\x2\x2\xCE\xCF\x5R*\x2\xCF\xD0\a;\x2\x2"+
		"\xD0\xD1\x5R*\x2\xD1\xD2\a;\x2\x2\xD2\xD3\x5R*\x2\xD3\xD4\a\x36\x2\x2"+
		"\xD4\xD5\a\x30\x2\x2\xD5\x15\x3\x2\x2\x2\xD6\xD7\a\x46\x2\x2\xD7\xD8\a"+
		"O\x2\x2\xD8\xD9\a\x35\x2\x2\xD9\xDA\aO\x2\x2\xDA\xDB\a;\x2\x2\xDB\xDC"+
		"\x5R*\x2\xDC\xDD\a;\x2\x2\xDD\xDE\x5R*\x2\xDE\xDF\a;\x2\x2\xDF\xE0\x5"+
		"R*\x2\xE0\xE1\a;\x2\x2\xE1\xE2\x5R*\x2\xE2\xE3\a;\x2\x2\xE3\xE4\x5R*\x2"+
		"\xE4\xE5\a\x36\x2\x2\xE5\xE6\a\x30\x2\x2\xE6\x17\x3\x2\x2\x2\xE7\xE8\a"+
		"G\x2\x2\xE8\xE9\aO\x2\x2\xE9\xEA\a\x35\x2\x2\xEA\xEB\aO\x2\x2\xEB\xEC"+
		"\a;\x2\x2\xEC\xED\x5R*\x2\xED\xEE\a;\x2\x2\xEE\xEF\x5R*\x2\xEF\xF1\a\x36"+
		"\x2\x2\xF0\xF2\aO\x2\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF3"+
		"\x3\x2\x2\x2\xF3\xF4\a\x30\x2\x2\xF4\x19\x3\x2\x2\x2\xF5\xF6\aI\x2\x2"+
		"\xF6\xF7\a\x33\x2\x2\xF7\xF8\aO\x2\x2\xF8\xF9\a\x34\x2\x2\xF9\xFA\aO\x2"+
		"\x2\xFA\xFE\a\x31\x2\x2\xFB\xFD\x5\x1C\xF\x2\xFC\xFB\x3\x2\x2\x2\xFD\x100"+
		"\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x101\x3\x2\x2"+
		"\x2\x100\xFE\x3\x2\x2\x2\x101\x102\a\x32\x2\x2\x102\x103\a\x30\x2\x2\x103"+
		"\x1B\x3\x2\x2\x2\x104\x108\x5\x1E\x10\x2\x105\x108\x5$\x13\x2\x106\x108"+
		"\x5.\x18\x2\x107\x104\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x106\x3\x2"+
		"\x2\x2\x108\x1D\x3\x2\x2\x2\x109\x10A\aJ\x2\x2\x10A\x10B\x5 \x11\x2\x10B"+
		"\x10C\a\x30\x2\x2\x10C\x1F\x3\x2\x2\x2\x10D\x10E\a\x35\x2\x2\x10E\x10F"+
		"\x5\"\x12\x2\x10F\x110\a\x36\x2\x2\x110!\x3\x2\x2\x2\x111\x112\b\x12\x1"+
		"\x2\x112\x113\aO\x2\x2\x113\x114\a\x3\x2\x2\x114\x115\x5R*\x2\x115\x11B"+
		"\x3\x2\x2\x2\x116\x117\f\x3\x2\x2\x117\x118\a\x4\x2\x2\x118\x11A\x5\""+
		"\x12\x4\x119\x116\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B\x119\x3\x2\x2"+
		"\x2\x11B\x11C\x3\x2\x2\x2\x11C#\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11E"+
		"\x11F\aK\x2\x2\x11F\x123\a\x31\x2\x2\x120\x122\x5&\x14\x2\x121\x120\x3"+
		"\x2\x2\x2\x122\x125\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x123\x124\x3\x2"+
		"\x2\x2\x124\x126\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x126\x127\a\x32\x2"+
		"\x2\x127\x128\a\x30\x2\x2\x128%\x3\x2\x2\x2\x129\x12C\x5(\x15\x2\x12A"+
		"\x12C\x5,\x17\x2\x12B\x129\x3\x2\x2\x2\x12B\x12A\x3\x2\x2\x2\x12C\'\x3"+
		"\x2\x2\x2\x12D\x12E\aL\x2\x2\x12E\x12F\x5*\x16\x2\x12F\x130\a\x30\x2\x2"+
		"\x130)\x3\x2\x2\x2\x131\x13D\a.\x2\x2\x132\x133\a@\x2\x2\x133\x134\a\x35"+
		"\x2\x2\x134\x139\aO\x2\x2\x135\x136\a;\x2\x2\x136\x138\aO\x2\x2\x137\x135"+
		"\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x139\x13A\x3"+
		"\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13C\x13E\a\x36"+
		"\x2\x2\x13D\x132\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E+\x3\x2\x2\x2\x13F"+
		"\x140\aM\x2\x2\x140\x141\x5 \x11\x2\x141\x145\a\x31\x2\x2\x142\x144\x5"+
		"&\x14\x2\x143\x142\x3\x2\x2\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2"+
		"\x2\x145\x146\x3\x2\x2\x2\x146\x148\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2"+
		"\x148\x149\a\x32\x2\x2\x149\x14A\a\x30\x2\x2\x14A-\x3\x2\x2\x2\x14B\x14C"+
		"\aH\x2\x2\x14C\x14D\aO\x2\x2\x14D\x14E\a\x30\x2\x2\x14E/\x3\x2\x2\x2\x14F"+
		"\x150\aH\x2\x2\x150\x151\a\x33\x2\x2\x151\x152\aO\x2\x2\x152\x153\a<\x2"+
		"\x2\x153\x154\aO\x2\x2\x154\x155\a\x34\x2\x2\x155\x156\aO\x2\x2\x156\x157"+
		"\x5<\x1F\x2\x157\x158\a\x30\x2\x2\x158\x31\x3\x2\x2\x2\x159\x15A\aN\x2"+
		"\x2\x15A\x15B\x5\x34\x1B\x2\x15B\x15C\x5<\x1F\x2\x15C\x15D\a\x30\x2\x2"+
		"\x15D\x33\x3\x2\x2\x2\x15E\x15F\aO\x2\x2\x15F\x160\aO\x2\x2\x160\x162"+
		"\a\x35\x2\x2\x161\x163\x5\x36\x1C\x2\x162\x161\x3\x2\x2\x2\x162\x163\x3"+
		"\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x168\a\x36\x2\x2\x165\x167\x5\x38"+
		"\x1D\x2\x166\x165\x3\x2\x2\x2\x167\x16A\x3\x2\x2\x2\x168\x166\x3\x2\x2"+
		"\x2\x168\x169\x3\x2\x2\x2\x169\x35\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16B"+
		"\x170\x5:\x1E\x2\x16C\x16D\a;\x2\x2\x16D\x16F\x5:\x1E\x2\x16E\x16C\x3"+
		"\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2"+
		"\x2\x2\x171\x37\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174\a\x5\x2\x2"+
		"\x174\x39\x3\x2\x2\x2\x175\x177\aO\x2\x2\x176\x178\a?\x2\x2\x177\x176"+
		"\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A\aO"+
		"\x2\x2\x17A;\x3\x2\x2\x2\x17B\x17F\a\x31\x2\x2\x17C\x17E\x5> \x2\x17D"+
		"\x17C\x3\x2\x2\x2\x17E\x181\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180"+
		"\x3\x2\x2\x2\x180\x182\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x182\x183\a\x32"+
		"\x2\x2\x183=\x3\x2\x2\x2\x184\x18A\x5@!\x2\x185\x18A\x5\x46$\x2\x186\x18A"+
		"\x5\x44#\x2\x187\x18A\x5\x42\"\x2\x188\x18A\x5<\x1F\x2\x189\x184\x3\x2"+
		"\x2\x2\x189\x185\x3\x2\x2\x2\x189\x186\x3\x2\x2\x2\x189\x187\x3\x2\x2"+
		"\x2\x189\x188\x3\x2\x2\x2\x18A?\x3\x2\x2\x2\x18B\x190\a\x30\x2\x2\x18C"+
		"\x18D\x5L\'\x2\x18D\x18E\a\x30\x2\x2\x18E\x190\x3\x2\x2\x2\x18F\x18B\x3"+
		"\x2\x2\x2\x18F\x18C\x3\x2\x2\x2\x190\x41\x3\x2\x2\x2\x191\x192\a\x6\x2"+
		"\x2\x192\x193\x5T+\x2\x193\x194\a/\x2\x2\x194\x195\x5> \x2\x195\x1A3\x3"+
		"\x2\x2\x2\x196\x197\a\a\x2\x2\x197\x198\a/\x2\x2\x198\x1A3\x5> \x2\x199"+
		"\x19A\a\b\x2\x2\x19A\x1A3\a\x30\x2\x2\x19B\x19C\a\t\x2\x2\x19C\x1A3\a"+
		"\x30\x2\x2\x19D\x19F\a\n\x2\x2\x19E\x1A0\x5L\'\x2\x19F\x19E\x3\x2\x2\x2"+
		"\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A3\a\x30\x2\x2\x1A2"+
		"\x191\x3\x2\x2\x2\x1A2\x196\x3\x2\x2\x2\x1A2\x199\x3\x2\x2\x2\x1A2\x19B"+
		"\x3\x2\x2\x2\x1A2\x19D\x3\x2\x2\x2\x1A3\x43\x3\x2\x2\x2\x1A4\x1A5\a\v"+
		"\x2\x2\x1A5\x1A6\a\x35\x2\x2\x1A6\x1A7\x5L\'\x2\x1A7\x1A8\a\x36\x2\x2"+
		"\x1A8\x1A9\x5> \x2\x1A9\x1C2\x3\x2\x2\x2\x1AA\x1AB\a\f\x2\x2\x1AB\x1AC"+
		"\x5> \x2\x1AC\x1AD\a\v\x2\x2\x1AD\x1AE\a\x35\x2\x2\x1AE\x1AF\x5L\'\x2"+
		"\x1AF\x1B0\a\x36\x2\x2\x1B0\x1B1\a\x30\x2\x2\x1B1\x1C2\x3\x2\x2\x2\x1B2"+
		"\x1B3\a\r\x2\x2\x1B3\x1B5\a\x35\x2\x2\x1B4\x1B6\x5L\'\x2\x1B5\x1B4\x3"+
		"\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7\x1B9\a\x30"+
		"\x2\x2\x1B8\x1BA\x5L\'\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2"+
		"\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BD\a\x30\x2\x2\x1BC\x1BE\x5L\'\x2\x1BD\x1BC"+
		"\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C0\a\x36"+
		"\x2\x2\x1C0\x1C2\x5> \x2\x1C1\x1A4\x3\x2\x2\x2\x1C1\x1AA\x3\x2\x2\x2\x1C1"+
		"\x1B2\x3\x2\x2\x2\x1C2\x45\x3\x2\x2\x2\x1C3\x1C6\x5H%\x2\x1C4\x1C6\x5"+
		"J&\x2\x1C5\x1C3\x3\x2\x2\x2\x1C5\x1C4\x3\x2\x2\x2\x1C6G\x3\x2\x2\x2\x1C7"+
		"\x1C8\a\xE\x2\x2\x1C8\x1C9\a\x35\x2\x2\x1C9\x1CA\x5L\'\x2\x1CA\x1CB\a"+
		"\x36\x2\x2\x1CB\x1CE\x5> \x2\x1CC\x1CD\a\xF\x2\x2\x1CD\x1CF\x5> \x2\x1CE"+
		"\x1CC\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CFI\x3\x2\x2\x2\x1D0\x1D1\a"+
		"\x10\x2\x2\x1D1\x1D2\a\x35\x2\x2\x1D2\x1D3\x5L\'\x2\x1D3\x1D4\a\x36\x2"+
		"\x2\x1D4\x1D5\x5> \x2\x1D5K\x3\x2\x2\x2\x1D6\x1DA\x5`\x31\x2\x1D7\x1D8"+
		"\x5h\x35\x2\x1D8\x1D9\x5j\x36\x2\x1D9\x1DB\x3\x2\x2\x2\x1DA\x1D7\x3\x2"+
		"\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1E3\x3\x2\x2\x2\x1DC\x1E0\x5j\x36\x2"+
		"\x1DD\x1DE\x5h\x35\x2\x1DE\x1DF\x5j\x36\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0"+
		"\x1DD\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E3\x3\x2\x2\x2\x1E2\x1D6"+
		"\x3\x2\x2\x2\x1E2\x1DC\x3\x2\x2\x2\x1E3M\x3\x2\x2\x2\x1E4\x1E5\x5l\x37"+
		"\x2\x1E5O\x3\x2\x2\x2\x1E6\x1EB\x5L\'\x2\x1E7\x1E8\a;\x2\x2\x1E8\x1EA"+
		"\x5L\'\x2\x1E9\x1E7\x3\x2\x2\x2\x1EA\x1ED\x3\x2\x2\x2\x1EB\x1E9\x3\x2"+
		"\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1EF\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2"+
		"\x2\x1EE\x1E6\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EFQ\x3\x2\x2\x2\x1F0"+
		"\x1F1\t\x2\x2\x2\x1F1S\x3\x2\x2\x2\x1F2\x1F5\x5R*\x2\x1F3\x1F5\a.\x2\x2"+
		"\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F5U\x3\x2\x2\x2\x1F6\x1FE"+
		"\x5X-\x2\x1F7\x1FE\aO\x2\x2\x1F8\x1FE\x5T+\x2\x1F9\x1FA\a\x35\x2\x2\x1FA"+
		"\x1FB\x5L\'\x2\x1FB\x1FC\a\x36\x2\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1F6\x3"+
		"\x2\x2\x2\x1FD\x1F7\x3\x2\x2\x2\x1FD\x1F8\x3\x2\x2\x2\x1FD\x1F9\x3\x2"+
		"\x2\x2\x1FEW\x3\x2\x2\x2\x1FF\x200\aO\x2\x2\x200\x201\a\x35\x2\x2\x201"+
		"\x202\x5P)\x2\x202\x203\a\x36\x2\x2\x203Y\x3\x2\x2\x2\x204\x205\t\x3\x2"+
		"\x2\x205[\x3\x2\x2\x2\x206\x207\x5V,\x2\x207\x208\x5^\x30\x2\x208\x20B"+
		"\x3\x2\x2\x2\x209\x20B\x5V,\x2\x20A\x206\x3\x2\x2\x2\x20A\x209\x3\x2\x2"+
		"\x2\x20B]\x3\x2\x2\x2\x20C\x20D\a\x37\x2\x2\x20D\x20E\x5L\'\x2\x20E\x20F"+
		"\a\x38\x2\x2\x20F\x217\x3\x2\x2\x2\x210\x211\a<\x2\x2\x211\x217\aO\x2"+
		"\x2\x212\x213\a=\x2\x2\x213\x217\aO\x2\x2\x214\x217\a\x13\x2\x2\x215\x217"+
		"\a\x14\x2\x2\x216\x20C\x3\x2\x2\x2\x216\x210\x3\x2\x2\x2\x216\x212\x3"+
		"\x2\x2\x2\x216\x214\x3\x2\x2\x2\x216\x215\x3\x2\x2\x2\x217_\x3\x2\x2\x2"+
		"\x218\x219\aO\x2\x2\x219\x21A\aO\x2\x2\x21A\x61\x3\x2\x2\x2\x21B\x224"+
		"\x5\\/\x2\x21C\x21D\a\x13\x2\x2\x21D\x224\x5\x62\x32\x2\x21E\x21F\a\x14"+
		"\x2\x2\x21F\x224\x5\x62\x32\x2\x220\x221\x5Z.\x2\x221\x222\x5\x80\x41"+
		"\x2\x222\x224\x3\x2\x2\x2\x223\x21B\x3\x2\x2\x2\x223\x21C\x3\x2\x2\x2"+
		"\x223\x21E\x3\x2\x2\x2\x223\x220\x3\x2\x2\x2\x224\x63\x3\x2\x2\x2\x225"+
		"\x228\x5`\x31\x2\x226\x228\x5\x62\x32\x2\x227\x225\x3\x2\x2\x2\x227\x226"+
		"\x3\x2\x2\x2\x228\x65\x3\x2\x2\x2\x229\x22A\x5\x64\x33\x2\x22A\x22B\x5"+
		"h\x35\x2\x22B\x22C\x5j\x36\x2\x22Cg\x3\x2\x2\x2\x22D\x239\a\x39\x2\x2"+
		"\x22E\x239\a\x15\x2\x2\x22F\x239\a\x16\x2\x2\x230\x239\a\x17\x2\x2\x231"+
		"\x239\a\x18\x2\x2\x232\x239\a\x19\x2\x2\x233\x239\a\x1A\x2\x2\x234\x239"+
		"\a\x1B\x2\x2\x235\x239\a\x1C\x2\x2\x236\x239\a\x1D\x2\x2\x237\x239\a\x1E"+
		"\x2\x2\x238\x22D\x3\x2\x2\x2\x238\x22E\x3\x2\x2\x2\x238\x22F\x3\x2\x2"+
		"\x2\x238\x230\x3\x2\x2\x2\x238\x231\x3\x2\x2\x2\x238\x232\x3\x2\x2\x2"+
		"\x238\x233\x3\x2\x2\x2\x238\x234\x3\x2\x2\x2\x238\x235\x3\x2\x2\x2\x238"+
		"\x236\x3\x2\x2\x2\x238\x237\x3\x2\x2\x2\x239i\x3\x2\x2\x2\x23A\x240\x5"+
		"l\x37\x2\x23B\x23C\a>\x2\x2\x23C\x23D\x5l\x37\x2\x23D\x23E\a/\x2\x2\x23E"+
		"\x23F\x5l\x37\x2\x23F\x241\x3\x2\x2\x2\x240\x23B\x3\x2\x2\x2\x240\x241"+
		"\x3\x2\x2\x2\x241k\x3\x2\x2\x2\x242\x247\x5n\x38\x2\x243\x244\a\x1F\x2"+
		"\x2\x244\x246\x5n\x38\x2\x245\x243\x3\x2\x2\x2\x246\x249\x3\x2\x2\x2\x247"+
		"\x245\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248m\x3\x2\x2\x2\x249\x247\x3"+
		"\x2\x2\x2\x24A\x24F\x5p\x39\x2\x24B\x24C\a\x4\x2\x2\x24C\x24E\x5p\x39"+
		"\x2\x24D\x24B\x3\x2\x2\x2\x24E\x251\x3\x2\x2\x2\x24F\x24D\x3\x2\x2\x2"+
		"\x24F\x250\x3\x2\x2\x2\x250o\x3\x2\x2\x2\x251\x24F\x3\x2\x2\x2\x252\x257"+
		"\x5r:\x2\x253\x254\a \x2\x2\x254\x256\x5r:\x2\x255\x253\x3\x2\x2\x2\x256"+
		"\x259\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258q\x3"+
		"\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A\x25F\x5t;\x2\x25B\x25C\a!\x2\x2\x25C"+
		"\x25E\x5t;\x2\x25D\x25B\x3\x2\x2\x2\x25E\x261\x3\x2\x2\x2\x25F\x25D\x3"+
		"\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260s\x3\x2\x2\x2\x261\x25F\x3\x2\x2\x2"+
		"\x262\x267\x5v<\x2\x263\x264\a?\x2\x2\x264\x266\x5v<\x2\x265\x263\x3\x2"+
		"\x2\x2\x266\x269\x3\x2\x2\x2\x267\x265\x3\x2\x2\x2\x267\x268\x3\x2\x2"+
		"\x2\x268u\x3\x2\x2\x2\x269\x267\x3\x2\x2\x2\x26A\x26F\x5x=\x2\x26B\x26C"+
		"\t\x4\x2\x2\x26C\x26E\x5x=\x2\x26D\x26B\x3\x2\x2\x2\x26E\x271\x3\x2\x2"+
		"\x2\x26F\x26D\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270w\x3\x2\x2\x2\x271"+
		"\x26F\x3\x2\x2\x2\x272\x277\x5z>\x2\x273\x274\t\x5\x2\x2\x274\x276\x5"+
		"z>\x2\x275\x273\x3\x2\x2\x2\x276\x279\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2"+
		"\x277\x278\x3\x2\x2\x2\x278y\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x27A\x27F"+
		"\x5|?\x2\x27B\x27C\t\x6\x2\x2\x27C\x27E\x5|?\x2\x27D\x27B\x3\x2\x2\x2"+
		"\x27E\x281\x3\x2\x2\x2\x27F\x27D\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280"+
		"{\x3\x2\x2\x2\x281\x27F\x3\x2\x2\x2\x282\x287\x5~@\x2\x283\x284\t\a\x2"+
		"\x2\x284\x286\x5~@\x2\x285\x283\x3\x2\x2\x2\x286\x289\x3\x2\x2\x2\x287"+
		"\x285\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288}\x3\x2\x2\x2\x289\x287\x3"+
		"\x2\x2\x2\x28A\x28F\x5\x80\x41\x2\x28B\x28C\t\b\x2\x2\x28C\x28E\x5\x80"+
		"\x41\x2\x28D\x28B\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2\x28F\x28D\x3\x2\x2"+
		"\x2\x28F\x290\x3\x2\x2\x2\x290\x7F\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x292"+
		"\x293\a\x35\x2\x2\x293\x294\aO\x2\x2\x294\x295\a\x36\x2\x2\x295\x298\x5"+
		"\x80\x41\x2\x296\x298\x5\x62\x32\x2\x297\x292\x3\x2\x2\x2\x297\x296\x3"+
		"\x2\x2\x2\x298\x81\x3\x2\x2\x2:\x86\x91\x99\xA1\xA9\xB1\xBC\xC5\xF1\xFE"+
		"\x107\x11B\x123\x12B\x139\x13D\x145\x162\x168\x170\x177\x17F\x189\x18F"+
		"\x19F\x1A2\x1B5\x1B9\x1BD\x1C1\x1C5\x1CE\x1DA\x1E0\x1E2\x1EB\x1EE\x1F4"+
		"\x1FD\x20A\x216\x223\x227\x238\x240\x247\x24F\x257\x25F\x267\x26F\x277"+
		"\x27F\x287\x28F\x297";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
