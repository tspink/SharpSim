//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ArchFile.g by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class ArchFileParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, HEX_VAL=42, INT_CONST=43, FLOAT_CONST=44, 
		STRING=45, COLON=46, SEMICOLON=47, LBRACE=48, RBRACE=49, LCHEV=50, RCHEV=51, 
		LPAREN=52, RPAREN=53, LBRACKET=54, RBRACKET=55, EQ=56, PLUS=57, COMMA=58, 
		DOT=59, STAR=60, QMARK=61, AMPERSAND=62, ARCH=63, ISA=64, BEHAVIOUR=65, 
		HELPER=66, IDENT=67, WS=68;
	public const int
		RULE_start = 0, RULE_arch_ident = 1, RULE_def = 2, RULE_isa_block_def = 3, 
		RULE_behaviour_def = 4, RULE_helper_def = 5, RULE_prototype = 6, RULE_parameter_list = 7, 
		RULE_attr = 8, RULE_parameter = 9, RULE_fnbody = 10, RULE_statement = 11, 
		RULE_expression_statement = 12, RULE_flow_statement = 13, RULE_iteration_statement = 14, 
		RULE_selection_statement = 15, RULE_if_statement = 16, RULE_switch_statement = 17, 
		RULE_expression = 18, RULE_constant_expr = 19, RULE_argument_list = 20, 
		RULE_constant = 21, RULE_primary_expression = 22, RULE_call_expression = 23, 
		RULE_unary_operator = 24, RULE_postfix_expression = 25, RULE_postfix_operator = 26, 
		RULE_declaration = 27, RULE_unary_expression = 28, RULE_lvalue = 29, RULE_full_assignment_expression = 30, 
		RULE_assignment_operator = 31, RULE_ternary_expression = 32, RULE_log_or_expression = 33, 
		RULE_log_and_expression = 34, RULE_bit_or_expression = 35, RULE_bit_xor_expression = 36, 
		RULE_bit_and_expression = 37, RULE_equality_expression = 38, RULE_comparison_expression = 39, 
		RULE_shift_expression = 40, RULE_add_expression = 41, RULE_mult_expression = 42, 
		RULE_cast_expression = 43;
	public static readonly string[] ruleNames = {
		"start", "arch_ident", "def", "isa_block_def", "behaviour_def", "helper_def", 
		"prototype", "parameter_list", "attr", "parameter", "fnbody", "statement", 
		"expression_statement", "flow_statement", "iteration_statement", "selection_statement", 
		"if_statement", "switch_statement", "expression", "constant_expr", "argument_list", 
		"constant", "primary_expression", "call_expression", "unary_operator", 
		"postfix_expression", "postfix_operator", "declaration", "unary_expression", 
		"lvalue", "full_assignment_expression", "assignment_operator", "ternary_expression", 
		"log_or_expression", "log_and_expression", "bit_or_expression", "bit_xor_expression", 
		"bit_and_expression", "equality_expression", "comparison_expression", 
		"shift_expression", "add_expression", "mult_expression", "cast_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'noinline'", "'case'", "'default'", "'break'", "'continue'", "'return'", 
		"'while'", "'do'", "'for'", "'if'", "'else'", "'switch'", "'-'", "'~'", 
		"'!'", "'++'", "'--'", "'+='", "'-='", "'&='", "'*='", "'/='", "'%='", 
		"'<<='", "'>>='", "'^='", "'|='", "'||'", "'&&'", "'|'", "'^'", "'=='", 
		"'!='", "'<='", "'>='", "'<<<'", "'<<'", "'>>'", "'>>>'", "'/'", "'%'", 
		null, null, null, null, "':'", "';'", "'{'", "'}'", "'<'", "'>'", "'('", 
		"')'", "'['", "']'", "'='", "'+'", "','", "'.'", "'*'", "'?'", "'&'", 
		"'arch'", "'isa'", "'behaviour'", "'helper'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "HEX_VAL", "INT_CONST", "FLOAT_CONST", 
		"STRING", "COLON", "SEMICOLON", "LBRACE", "RBRACE", "LCHEV", "RCHEV", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "EQ", "PLUS", "COMMA", "DOT", 
		"STAR", "QMARK", "AMPERSAND", "ARCH", "ISA", "BEHAVIOUR", "HELPER", "IDENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArchFile.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ArchFileParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public Arch_identContext arch_ident() {
			return GetRuleContext<Arch_identContext>(0);
		}
		public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; arch_ident();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ISA - 64)) | (1L << (BEHAVIOUR - 64)) | (1L << (HELPER - 64)))) != 0)) {
				{
				{
				State = 89; def();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arch_identContext : ParserRuleContext {
		public ITerminalNode ARCH() { return GetToken(ArchFileParser.ARCH, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Arch_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arch_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterArch_ident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitArch_ident(this);
		}
	}

	[RuleVersion(0)]
	public Arch_identContext arch_ident() {
		Arch_identContext _localctx = new Arch_identContext(Context, State);
		EnterRule(_localctx, 2, RULE_arch_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(ARCH);
			State = 96; Match(IDENT);
			State = 97; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		public Isa_block_defContext isa_block_def() {
			return GetRuleContext<Isa_block_defContext>(0);
		}
		public Behaviour_defContext behaviour_def() {
			return GetRuleContext<Behaviour_defContext>(0);
		}
		public Helper_defContext helper_def() {
			return GetRuleContext<Helper_defContext>(0);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 4, RULE_def);
		try {
			State = 102;
			switch (TokenStream.La(1)) {
			case ISA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; isa_block_def();
				}
				break;
			case BEHAVIOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; behaviour_def();
				}
				break;
			case HELPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; helper_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Isa_block_defContext : ParserRuleContext {
		public ITerminalNode ISA() { return GetToken(ArchFileParser.ISA, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Isa_block_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isa_block_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIsa_block_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIsa_block_def(this);
		}
	}

	[RuleVersion(0)]
	public Isa_block_defContext isa_block_def() {
		Isa_block_defContext _localctx = new Isa_block_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_isa_block_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(ISA);
			State = 105; Match(IDENT);
			State = 106; Match(LBRACE);
			State = 107; Match(RBRACE);
			State = 108; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Behaviour_defContext : ParserRuleContext {
		public IToken type;
		public IToken name;
		public ITerminalNode BEHAVIOUR() { return GetToken(ArchFileParser.BEHAVIOUR, 0); }
		public ITerminalNode LCHEV() { return GetToken(ArchFileParser.LCHEV, 0); }
		public ITerminalNode RCHEV() { return GetToken(ArchFileParser.RCHEV, 0); }
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Behaviour_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviour_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBehaviour_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBehaviour_def(this);
		}
	}

	[RuleVersion(0)]
	public Behaviour_defContext behaviour_def() {
		Behaviour_defContext _localctx = new Behaviour_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_behaviour_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(BEHAVIOUR);
			State = 111; Match(LCHEV);
			State = 112; _localctx.type = Match(IDENT);
			State = 113; Match(RCHEV);
			State = 114; _localctx.name = Match(IDENT);
			State = 115; fnbody();
			State = 116; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Helper_defContext : ParserRuleContext {
		public ITerminalNode HELPER() { return GetToken(ArchFileParser.HELPER, 0); }
		public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Helper_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helper_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterHelper_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitHelper_def(this);
		}
	}

	[RuleVersion(0)]
	public Helper_defContext helper_def() {
		Helper_defContext _localctx = new Helper_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_helper_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(HELPER);
			State = 119; prototype();
			State = 120; fnbody();
			State = 121; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		public IToken rtype;
		public IToken name;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; _localctx.rtype = Match(IDENT);
			State = 124; _localctx.name = Match(IDENT);
			State = 125; Match(LPAREN);
			State = 127;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 126; parameter_list();
				}
			}

			State = 129; Match(RPAREN);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0) {
				{
				{
				State = 130; attr();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; parameter();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 137; Match(COMMA);
				State = 138; parameter();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public IToken T;
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 16, RULE_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; _localctx.T = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken type;
		public IToken @ref;
		public IToken name;
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(ArchFileParser.AMPERSAND, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; _localctx.type = Match(IDENT);
			State = 148;
			_la = TokenStream.La(1);
			if (_la==AMPERSAND) {
				{
				State = 147; _localctx.@ref = Match(AMPERSAND);
				}
			}

			State = 150; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnbodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FnbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFnbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFnbody(this);
		}
	}

	[RuleVersion(0)]
	public FnbodyContext fnbody() {
		FnbodyContext _localctx = new FnbodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_fnbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(LBRACE);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << HEX_VAL) | (1L << INT_CONST) | (1L << FLOAT_CONST) | (1L << STRING) | (1L << SEMICOLON) | (1L << LBRACE) | (1L << LPAREN) | (1L << PLUS) | (1L << STAR) | (1L << AMPERSAND))) != 0) || _la==IDENT) {
				{
				{
				State = 153; statement();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 159; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Flow_statementContext flow_statement() {
			return GetRuleContext<Flow_statementContext>(0);
		}
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 166;
			switch (TokenStream.La(1)) {
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case SEMICOLON:
			case LPAREN:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; expression_statement();
				}
				break;
			case T__9:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; selection_statement();
				}
				break;
			case T__6:
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; iteration_statement();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 164; flow_statement();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 165; fnbody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression_statement);
		try {
			State = 172;
			switch (TokenStream.La(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168; Match(SEMICOLON);
				}
				break;
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case LPAREN:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; expression();
				State = 170; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_statementContext : ParserRuleContext {
		public IToken S;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Flow_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFlow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFlow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Flow_statementContext flow_statement() {
		Flow_statementContext _localctx = new Flow_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_flow_statement);
		int _la;
		try {
			State = 191;
			switch (TokenStream.La(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; _localctx.S = Match(T__1);
				State = 175; constant();
				State = 176; Match(COLON);
				State = 177; statement();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; _localctx.S = Match(T__2);
				State = 180; Match(COLON);
				State = 181; statement();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182; _localctx.S = Match(T__3);
				State = 183; Match(SEMICOLON);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 184; _localctx.S = Match(T__4);
				State = 185; Match(SEMICOLON);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; _localctx.S = Match(T__5);
				State = 188;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 187; expression();
					}
				}

				State = 190; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(ArchFileParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(ArchFileParser.SEMICOLON, i);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_iteration_statement);
		int _la;
		try {
			State = 222;
			switch (TokenStream.La(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; Match(T__6);
				State = 194; Match(LPAREN);
				State = 195; expression();
				State = 196; Match(RPAREN);
				State = 197; statement();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(T__7);
				State = 200; statement();
				State = 201; Match(T__6);
				State = 202; Match(LPAREN);
				State = 203; expression();
				State = 204; Match(RPAREN);
				State = 205; Match(SEMICOLON);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; Match(T__8);
				State = 208; Match(LPAREN);
				State = 210;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 209; expression();
					}
				}

				State = 212; Match(SEMICOLON);
				State = 214;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 213; expression();
					}
				}

				State = 216; Match(SEMICOLON);
				State = 218;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 217; expression();
					}
				}

				State = 220; Match(RPAREN);
				State = 221; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_selection_statement);
		try {
			State = 226;
			switch (TokenStream.La(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; if_statement();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public IToken KW;
		public ExpressionContext cond;
		public StatementContext tt;
		public StatementContext ft;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; _localctx.KW = Match(T__9);
			State = 229; Match(LPAREN);
			State = 230; _localctx.cond = expression();
			State = 231; Match(RPAREN);
			State = 232; _localctx.tt = statement();
			State = 235;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 233; Match(T__10);
				State = 234; _localctx.ft = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public IToken KW;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; _localctx.KW = Match(T__11);
			State = 238; Match(LPAREN);
			State = 239; expression();
			State = 240; Match(RPAREN);
			State = 241; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Ternary_expressionContext rvalue;
		public Ternary_expressionContext expr;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Ternary_expressionContext[] ternary_expression() {
			return GetRuleContexts<Ternary_expressionContext>();
		}
		public Ternary_expressionContext ternary_expression(int i) {
			return GetRuleContext<Ternary_expressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			State = 255;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; declaration();
				State = 247;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << EQ))) != 0)) {
					{
					State = 244; assignment_operator();
					State = 245; _localctx.rvalue = ternary_expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; _localctx.expr = ternary_expression();
				State = 253;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << EQ))) != 0)) {
					{
					State = 250; assignment_operator();
					State = 251; _localctx.rvalue = ternary_expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_exprContext : ParserRuleContext {
		public Log_or_expressionContext log_or_expression() {
			return GetRuleContext<Log_or_expressionContext>(0);
		}
		public Constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Constant_exprContext constant_expr() {
		Constant_exprContext _localctx = new Constant_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; log_or_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.La(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
				{
				State = 259; expression();
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 260; Match(COMMA);
					State = 261; expression();
					}
					}
					State = 266;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode HEX_VAL() { return GetToken(ArchFileParser.HEX_VAL, 0); }
		public ITerminalNode INT_CONST() { return GetToken(ArchFileParser.INT_CONST, 0); }
		public ITerminalNode FLOAT_CONST() { return GetToken(ArchFileParser.FLOAT_CONST, 0); }
		public ITerminalNode STRING() { return GetToken(ArchFileParser.STRING, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 42, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HEX_VAL) | (1L << INT_CONST) | (1L << FLOAT_CONST) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public IToken sym;
		public ConstantContext imm;
		public ExpressionContext expr;
		public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_primary_expression);
		try {
			State = 278;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; call_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; _localctx.sym = Match(IDENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 273; _localctx.imm = constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274; Match(LPAREN);
				State = 275; _localctx.expr = expression();
				State = 276; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public IToken fn;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		Call_expressionContext _localctx = new Call_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_call_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; _localctx.fn = Match(IDENT);
			State = 281; Match(LPAREN);
			State = 282; argument_list();
			State = 283; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << PLUS) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Postfix_operatorContext postfix_operator() {
			return GetRuleContext<Postfix_operatorContext>(0);
		}
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPostfix_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPostfix_expression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_postfix_expression);
		try {
			State = 291;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 287; primary_expression();
				State = 288; postfix_operator();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290; primary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_operatorContext : ParserRuleContext {
		public IToken member;
		public IToken symbol;
		public ITerminalNode LBRACKET() { return GetToken(ArchFileParser.LBRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(ArchFileParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(ArchFileParser.DOT, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode STAR() { return GetToken(ArchFileParser.STAR, 0); }
		public Postfix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPostfix_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPostfix_operator(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_operatorContext postfix_operator() {
		Postfix_operatorContext _localctx = new Postfix_operatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_postfix_operator);
		try {
			State = 303;
			switch (TokenStream.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293; Match(LBRACKET);
				State = 294; expression();
				State = 295; Match(RBRACKET);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; Match(DOT);
				State = 298; _localctx.member = Match(IDENT);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 299; Match(STAR);
				State = 300; _localctx.symbol = Match(IDENT);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301; Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 302; Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public IToken type;
		public IToken name;
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; _localctx.type = Match(IDENT);
			State = 306; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_unary_expression);
		try {
			State = 316;
			switch (TokenStream.La(1)) {
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case LPAREN:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308; postfix_expression();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309; Match(T__15);
				State = 310; unary_expression();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311; Match(T__16);
				State = 312; unary_expression();
				}
				break;
			case T__12:
			case T__13:
			case T__14:
			case PLUS:
			case STAR:
			case AMPERSAND:
				EnterOuterAlt(_localctx, 4);
				{
				State = 313; unary_operator();
				State = 314; cast_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLvalue(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 58, RULE_lvalue);
		try {
			State = 320;
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_assignment_expressionContext : ParserRuleContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Ternary_expressionContext ternary_expression() {
			return GetRuleContext<Ternary_expressionContext>(0);
		}
		public Full_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFull_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFull_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Full_assignment_expressionContext full_assignment_expression() {
		Full_assignment_expressionContext _localctx = new Full_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_full_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; lvalue();
			State = 323; assignment_operator();
			State = 324; ternary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public IToken S;
		public ITerminalNode EQ() { return GetToken(ArchFileParser.EQ, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_assignment_operator);
		try {
			State = 337;
			switch (TokenStream.La(1)) {
			case EQ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326; _localctx.S = Match(EQ);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327; _localctx.S = Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 328; _localctx.S = Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 329; _localctx.S = Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 5);
				{
				State = 330; _localctx.S = Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 6);
				{
				State = 331; _localctx.S = Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 7);
				{
				State = 332; _localctx.S = Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 8);
				{
				State = 333; _localctx.S = Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 9);
				{
				State = 334; _localctx.S = Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 10);
				{
				State = 335; _localctx.S = Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 11);
				{
				State = 336; _localctx.S = Match(T__26);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ternary_expressionContext : ParserRuleContext {
		public Log_or_expressionContext cond;
		public Log_or_expressionContext left;
		public Log_or_expressionContext right;
		public Log_or_expressionContext[] log_or_expression() {
			return GetRuleContexts<Log_or_expressionContext>();
		}
		public Log_or_expressionContext log_or_expression(int i) {
			return GetRuleContext<Log_or_expressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(ArchFileParser.QMARK, 0); }
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public Ternary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterTernary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitTernary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ternary_expressionContext ternary_expression() {
		Ternary_expressionContext _localctx = new Ternary_expressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_ternary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; _localctx.cond = log_or_expression();
			State = 345;
			_la = TokenStream.La(1);
			if (_la==QMARK) {
				{
				State = 340; Match(QMARK);
				State = 341; _localctx.left = log_or_expression();
				State = 342; Match(COLON);
				State = 343; _localctx.right = log_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_or_expressionContext : ParserRuleContext {
		public Log_and_expressionContext L;
		public IToken P;
		public Log_and_expressionContext R;
		public Log_and_expressionContext[] log_and_expression() {
			return GetRuleContexts<Log_and_expressionContext>();
		}
		public Log_and_expressionContext log_and_expression(int i) {
			return GetRuleContext<Log_and_expressionContext>(i);
		}
		public Log_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLog_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLog_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Log_or_expressionContext log_or_expression() {
		Log_or_expressionContext _localctx = new Log_or_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_log_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; _localctx.L = log_and_expression();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__27) {
				{
				{
				State = 348; _localctx.P = Match(T__27);
				State = 349; _localctx.R = log_and_expression();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_and_expressionContext : ParserRuleContext {
		public Bit_or_expressionContext L;
		public IToken P;
		public Bit_or_expressionContext R;
		public Bit_or_expressionContext[] bit_or_expression() {
			return GetRuleContexts<Bit_or_expressionContext>();
		}
		public Bit_or_expressionContext bit_or_expression(int i) {
			return GetRuleContext<Bit_or_expressionContext>(i);
		}
		public Log_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLog_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLog_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Log_and_expressionContext log_and_expression() {
		Log_and_expressionContext _localctx = new Log_and_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_log_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; _localctx.L = bit_or_expression();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__28) {
				{
				{
				State = 356; _localctx.P = Match(T__28);
				State = 357; _localctx.R = bit_or_expression();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_or_expressionContext : ParserRuleContext {
		public Bit_xor_expressionContext L;
		public IToken P;
		public Bit_xor_expressionContext R;
		public Bit_xor_expressionContext[] bit_xor_expression() {
			return GetRuleContexts<Bit_xor_expressionContext>();
		}
		public Bit_xor_expressionContext bit_xor_expression(int i) {
			return GetRuleContext<Bit_xor_expressionContext>(i);
		}
		public Bit_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_expressionContext bit_or_expression() {
		Bit_or_expressionContext _localctx = new Bit_or_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_bit_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; _localctx.L = bit_xor_expression();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__29) {
				{
				{
				State = 364; _localctx.P = Match(T__29);
				State = 365; _localctx.R = bit_xor_expression();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_xor_expressionContext : ParserRuleContext {
		public Bit_and_expressionContext L;
		public IToken P;
		public Bit_and_expressionContext R;
		public Bit_and_expressionContext[] bit_and_expression() {
			return GetRuleContexts<Bit_and_expressionContext>();
		}
		public Bit_and_expressionContext bit_and_expression(int i) {
			return GetRuleContext<Bit_and_expressionContext>(i);
		}
		public Bit_xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_xor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_xor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_xor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_xor_expressionContext bit_xor_expression() {
		Bit_xor_expressionContext _localctx = new Bit_xor_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_bit_xor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; _localctx.L = bit_and_expression();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__30) {
				{
				{
				State = 372; _localctx.P = Match(T__30);
				State = 373; _localctx.R = bit_and_expression();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		public Equality_expressionContext L;
		public IToken P;
		public Equality_expressionContext R;
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_bit_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; _localctx.L = equality_expression();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AMPERSAND) {
				{
				{
				State = 380; _localctx.P = Match(AMPERSAND);
				State = 381; _localctx.R = equality_expression();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Comparison_expressionContext L;
		public IToken P;
		public Comparison_expressionContext R;
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; _localctx.L = comparison_expression();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__31 || _la==T__32) {
				{
				{
				State = 388;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==T__31 || _la==T__32) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 389; _localctx.R = comparison_expression();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Shift_expressionContext L;
		public IToken P;
		public Shift_expressionContext R;
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_comparison_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; _localctx.L = shift_expression();
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__33) | (1L << T__34) | (1L << LCHEV) | (1L << RCHEV))) != 0)) {
				{
				{
				State = 396;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__33) | (1L << T__34) | (1L << LCHEV) | (1L << RCHEV))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 397; _localctx.R = shift_expression();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Add_expressionContext L;
		public IToken P;
		public Add_expressionContext R;
		public Add_expressionContext[] add_expression() {
			return GetRuleContexts<Add_expressionContext>();
		}
		public Add_expressionContext add_expression(int i) {
			return GetRuleContext<Add_expressionContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_shift_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; _localctx.L = add_expression();
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) {
				{
				{
				State = 404;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 405; _localctx.R = add_expression();
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_expressionContext : ParserRuleContext {
		public Mult_expressionContext L;
		public IToken P;
		public Mult_expressionContext R;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Add_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAdd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAdd_expression(this);
		}
	}

	[RuleVersion(0)]
	public Add_expressionContext add_expression() {
		Add_expressionContext _localctx = new Add_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_add_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; _localctx.L = mult_expression();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__12 || _la==PLUS) {
				{
				{
				State = 412;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==T__12 || _la==PLUS) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 413; _localctx.R = mult_expression();
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_expressionContext : ParserRuleContext {
		public Cast_expressionContext L;
		public IToken P;
		public Cast_expressionContext R;
		public Cast_expressionContext[] cast_expression() {
			return GetRuleContexts<Cast_expressionContext>();
		}
		public Cast_expressionContext cast_expression(int i) {
			return GetRuleContext<Cast_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; _localctx.L = cast_expression();
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << STAR))) != 0)) {
				{
				{
				State = 420;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << STAR))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 421; _localctx.R = cast_expression();
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public IToken type;
		public Unary_expressionContext expr;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_cast_expression);
		try {
			State = 432;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; Match(LPAREN);
				State = 428; _localctx.type = Match(IDENT);
				State = 429; Match(RPAREN);
				State = 430; cast_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; _localctx.expr = unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x46\x1B5\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x3\x2\x3\x2\a\x2]\n\x2\f\x2\xE\x2`\v\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x5\x4i\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b\x82\n\b\x3\b\x3\b\a\b\x86\n\b"+
		"\f\b\xE\b\x89\v\b\x3\t\x3\t\x3\t\a\t\x8E\n\t\f\t\xE\t\x91\v\t\x3\n\x3"+
		"\n\x3\v\x3\v\x5\v\x97\n\v\x3\v\x3\v\x3\f\x3\f\a\f\x9D\n\f\f\f\xE\f\xA0"+
		"\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA9\n\r\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x5\xE\xAF\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xBF\n\xF\x3\xF\x5\xF\xC2\n"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD5\n\x10"+
		"\x3\x10\x3\x10\x5\x10\xD9\n\x10\x3\x10\x3\x10\x5\x10\xDD\n\x10\x3\x10"+
		"\x3\x10\x5\x10\xE1\n\x10\x3\x11\x3\x11\x5\x11\xE5\n\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xEE\n\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xFA\n\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x100\n\x14\x5\x14\x102\n\x14\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\x3\x16\a\x16\x109\n\x16\f\x16\xE\x16\x10C\v\x16"+
		"\x5\x16\x10E\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x5\x18\x119\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x126\n\x1B\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x132\n\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x5\x1E\x13F\n\x1E\x3\x1F\x3\x1F\x5\x1F\x143\n\x1F\x3 \x3 \x3 "+
		"\x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x154\n!\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x5\"\x15C\n\"\x3#\x3#\x3#\a#\x161\n#\f#\xE#\x164"+
		"\v#\x3$\x3$\x3$\a$\x169\n$\f$\xE$\x16C\v$\x3%\x3%\x3%\a%\x171\n%\f%\xE"+
		"%\x174\v%\x3&\x3&\x3&\a&\x179\n&\f&\xE&\x17C\v&\x3\'\x3\'\x3\'\a\'\x181"+
		"\n\'\f\'\xE\'\x184\v\'\x3(\x3(\x3(\a(\x189\n(\f(\xE(\x18C\v(\x3)\x3)\x3"+
		")\a)\x191\n)\f)\xE)\x194\v)\x3*\x3*\x3*\a*\x199\n*\f*\xE*\x19C\v*\x3+"+
		"\x3+\x3+\a+\x1A1\n+\f+\xE+\x1A4\v+\x3,\x3,\x3,\a,\x1A9\n,\f,\xE,\x1AC"+
		"\v,\x3-\x3-\x3-\x3-\x3-\x5-\x1B3\n-\x3-\x2\x2.\x2\x4\x6\b\n\f\xE\x10\x12"+
		"\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46"+
		"HJLNPRTVX\x2\t\x3\x2,/\x6\x2\xF\x11;;>>@@\x3\x2\"#\x4\x2$%\x34\x35\x3"+
		"\x2&)\x4\x2\xF\xF;;\x4\x2*+>>\x1C8\x2Z\x3\x2\x2\x2\x4\x61\x3\x2\x2\x2"+
		"\x6h\x3\x2\x2\x2\bj\x3\x2\x2\x2\np\x3\x2\x2\x2\fx\x3\x2\x2\x2\xE}\x3\x2"+
		"\x2\x2\x10\x8A\x3\x2\x2\x2\x12\x92\x3\x2\x2\x2\x14\x94\x3\x2\x2\x2\x16"+
		"\x9A\x3\x2\x2\x2\x18\xA8\x3\x2\x2\x2\x1A\xAE\x3\x2\x2\x2\x1C\xC1\x3\x2"+
		"\x2\x2\x1E\xE0\x3\x2\x2\x2 \xE4\x3\x2\x2\x2\"\xE6\x3\x2\x2\x2$\xEF\x3"+
		"\x2\x2\x2&\x101\x3\x2\x2\x2(\x103\x3\x2\x2\x2*\x10D\x3\x2\x2\x2,\x10F"+
		"\x3\x2\x2\x2.\x118\x3\x2\x2\x2\x30\x11A\x3\x2\x2\x2\x32\x11F\x3\x2\x2"+
		"\x2\x34\x125\x3\x2\x2\x2\x36\x131\x3\x2\x2\x2\x38\x133\x3\x2\x2\x2:\x13E"+
		"\x3\x2\x2\x2<\x142\x3\x2\x2\x2>\x144\x3\x2\x2\x2@\x153\x3\x2\x2\x2\x42"+
		"\x155\x3\x2\x2\x2\x44\x15D\x3\x2\x2\x2\x46\x165\x3\x2\x2\x2H\x16D\x3\x2"+
		"\x2\x2J\x175\x3\x2\x2\x2L\x17D\x3\x2\x2\x2N\x185\x3\x2\x2\x2P\x18D\x3"+
		"\x2\x2\x2R\x195\x3\x2\x2\x2T\x19D\x3\x2\x2\x2V\x1A5\x3\x2\x2\x2X\x1B2"+
		"\x3\x2\x2\x2Z^\x5\x4\x3\x2[]\x5\x6\x4\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2"+
		"^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x3\x3\x2\x2\x2`^\x3\x2\x2\x2\x61\x62\a"+
		"\x41\x2\x2\x62\x63\a\x45\x2\x2\x63\x64\a\x31\x2\x2\x64\x5\x3\x2\x2\x2"+
		"\x65i\x5\b\x5\x2\x66i\x5\n\x6\x2gi\x5\f\a\x2h\x65\x3\x2\x2\x2h\x66\x3"+
		"\x2\x2\x2hg\x3\x2\x2\x2i\a\x3\x2\x2\x2jk\a\x42\x2\x2kl\a\x45\x2\x2lm\a"+
		"\x32\x2\x2mn\a\x33\x2\x2no\a\x31\x2\x2o\t\x3\x2\x2\x2pq\a\x43\x2\x2qr"+
		"\a\x34\x2\x2rs\a\x45\x2\x2st\a\x35\x2\x2tu\a\x45\x2\x2uv\x5\x16\f\x2v"+
		"w\a\x31\x2\x2w\v\x3\x2\x2\x2xy\a\x44\x2\x2yz\x5\xE\b\x2z{\x5\x16\f\x2"+
		"{|\a\x31\x2\x2|\r\x3\x2\x2\x2}~\a\x45\x2\x2~\x7F\a\x45\x2\x2\x7F\x81\a"+
		"\x36\x2\x2\x80\x82\x5\x10\t\x2\x81\x80\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2"+
		"\x82\x83\x3\x2\x2\x2\x83\x87\a\x37\x2\x2\x84\x86\x5\x12\n\x2\x85\x84\x3"+
		"\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2"+
		"\x88\xF\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x8A\x8F\x5\x14\v\x2\x8B\x8C\a"+
		"<\x2\x2\x8C\x8E\x5\x14\v\x2\x8D\x8B\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F"+
		"\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x11\x3\x2\x2\x2\x91\x8F\x3\x2"+
		"\x2\x2\x92\x93\a\x3\x2\x2\x93\x13\x3\x2\x2\x2\x94\x96\a\x45\x2\x2\x95"+
		"\x97\a@\x2\x2\x96\x95\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x98\x3\x2\x2"+
		"\x2\x98\x99\a\x45\x2\x2\x99\x15\x3\x2\x2\x2\x9A\x9E\a\x32\x2\x2\x9B\x9D"+
		"\x5\x18\r\x2\x9C\x9B\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2"+
		"\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA1\xA2"+
		"\a\x33\x2\x2\xA2\x17\x3\x2\x2\x2\xA3\xA9\x5\x1A\xE\x2\xA4\xA9\x5 \x11"+
		"\x2\xA5\xA9\x5\x1E\x10\x2\xA6\xA9\x5\x1C\xF\x2\xA7\xA9\x5\x16\f\x2\xA8"+
		"\xA3\x3\x2\x2\x2\xA8\xA4\x3\x2\x2\x2\xA8\xA5\x3\x2\x2\x2\xA8\xA6\x3\x2"+
		"\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\x19\x3\x2\x2\x2\xAA\xAF\a\x31\x2\x2\xAB"+
		"\xAC\x5&\x14\x2\xAC\xAD\a\x31\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAA\x3\x2"+
		"\x2\x2\xAE\xAB\x3\x2\x2\x2\xAF\x1B\x3\x2\x2\x2\xB0\xB1\a\x4\x2\x2\xB1"+
		"\xB2\x5,\x17\x2\xB2\xB3\a\x30\x2\x2\xB3\xB4\x5\x18\r\x2\xB4\xC2\x3\x2"+
		"\x2\x2\xB5\xB6\a\x5\x2\x2\xB6\xB7\a\x30\x2\x2\xB7\xC2\x5\x18\r\x2\xB8"+
		"\xB9\a\x6\x2\x2\xB9\xC2\a\x31\x2\x2\xBA\xBB\a\a\x2\x2\xBB\xC2\a\x31\x2"+
		"\x2\xBC\xBE\a\b\x2\x2\xBD\xBF\x5&\x14\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3"+
		"\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\a\x31\x2\x2\xC1\xB0\x3\x2\x2\x2"+
		"\xC1\xB5\x3\x2\x2\x2\xC1\xB8\x3\x2\x2\x2\xC1\xBA\x3\x2\x2\x2\xC1\xBC\x3"+
		"\x2\x2\x2\xC2\x1D\x3\x2\x2\x2\xC3\xC4\a\t\x2\x2\xC4\xC5\a\x36\x2\x2\xC5"+
		"\xC6\x5&\x14\x2\xC6\xC7\a\x37\x2\x2\xC7\xC8\x5\x18\r\x2\xC8\xE1\x3\x2"+
		"\x2\x2\xC9\xCA\a\n\x2\x2\xCA\xCB\x5\x18\r\x2\xCB\xCC\a\t\x2\x2\xCC\xCD"+
		"\a\x36\x2\x2\xCD\xCE\x5&\x14\x2\xCE\xCF\a\x37\x2\x2\xCF\xD0\a\x31\x2\x2"+
		"\xD0\xE1\x3\x2\x2\x2\xD1\xD2\a\v\x2\x2\xD2\xD4\a\x36\x2\x2\xD3\xD5\x5"+
		"&\x14\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6"+
		"\xD8\a\x31\x2\x2\xD7\xD9\x5&\x14\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2"+
		"\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDC\a\x31\x2\x2\xDB\xDD\x5&\x14\x2\xDC"+
		"\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\a\x37"+
		"\x2\x2\xDF\xE1\x5\x18\r\x2\xE0\xC3\x3\x2\x2\x2\xE0\xC9\x3\x2\x2\x2\xE0"+
		"\xD1\x3\x2\x2\x2\xE1\x1F\x3\x2\x2\x2\xE2\xE5\x5\"\x12\x2\xE3\xE5\x5$\x13"+
		"\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE3\x3\x2\x2\x2\xE5!\x3\x2\x2\x2\xE6\xE7\a"+
		"\f\x2\x2\xE7\xE8\a\x36\x2\x2\xE8\xE9\x5&\x14\x2\xE9\xEA\a\x37\x2\x2\xEA"+
		"\xED\x5\x18\r\x2\xEB\xEC\a\r\x2\x2\xEC\xEE\x5\x18\r\x2\xED\xEB\x3\x2\x2"+
		"\x2\xED\xEE\x3\x2\x2\x2\xEE#\x3\x2\x2\x2\xEF\xF0\a\xE\x2\x2\xF0\xF1\a"+
		"\x36\x2\x2\xF1\xF2\x5&\x14\x2\xF2\xF3\a\x37\x2\x2\xF3\xF4\x5\x18\r\x2"+
		"\xF4%\x3\x2\x2\x2\xF5\xF9\x5\x38\x1D\x2\xF6\xF7\x5@!\x2\xF7\xF8\x5\x42"+
		"\"\x2\xF8\xFA\x3\x2\x2\x2\xF9\xF6\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA"+
		"\x102\x3\x2\x2\x2\xFB\xFF\x5\x42\"\x2\xFC\xFD\x5@!\x2\xFD\xFE\x5\x42\""+
		"\x2\xFE\x100\x3\x2\x2\x2\xFF\xFC\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x102\x3\x2\x2\x2\x101\xF5\x3\x2\x2\x2\x101\xFB\x3\x2\x2\x2\x102\'\x3"+
		"\x2\x2\x2\x103\x104\x5\x44#\x2\x104)\x3\x2\x2\x2\x105\x10A\x5&\x14\x2"+
		"\x106\x107\a<\x2\x2\x107\x109\x5&\x14\x2\x108\x106\x3\x2\x2\x2\x109\x10C"+
		"\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10E\x3"+
		"\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x105\x3\x2\x2\x2\x10D\x10E\x3\x2"+
		"\x2\x2\x10E+\x3\x2\x2\x2\x10F\x110\t\x2\x2\x2\x110-\x3\x2\x2\x2\x111\x119"+
		"\x5\x30\x19\x2\x112\x119\a\x45\x2\x2\x113\x119\x5,\x17\x2\x114\x115\a"+
		"\x36\x2\x2\x115\x116\x5&\x14\x2\x116\x117\a\x37\x2\x2\x117\x119\x3\x2"+
		"\x2\x2\x118\x111\x3\x2\x2\x2\x118\x112\x3\x2\x2\x2\x118\x113\x3\x2\x2"+
		"\x2\x118\x114\x3\x2\x2\x2\x119/\x3\x2\x2\x2\x11A\x11B\a\x45\x2\x2\x11B"+
		"\x11C\a\x36\x2\x2\x11C\x11D\x5*\x16\x2\x11D\x11E\a\x37\x2\x2\x11E\x31"+
		"\x3\x2\x2\x2\x11F\x120\t\x3\x2\x2\x120\x33\x3\x2\x2\x2\x121\x122\x5.\x18"+
		"\x2\x122\x123\x5\x36\x1C\x2\x123\x126\x3\x2\x2\x2\x124\x126\x5.\x18\x2"+
		"\x125\x121\x3\x2\x2\x2\x125\x124\x3\x2\x2\x2\x126\x35\x3\x2\x2\x2\x127"+
		"\x128\a\x38\x2\x2\x128\x129\x5&\x14\x2\x129\x12A\a\x39\x2\x2\x12A\x132"+
		"\x3\x2\x2\x2\x12B\x12C\a=\x2\x2\x12C\x132\a\x45\x2\x2\x12D\x12E\a>\x2"+
		"\x2\x12E\x132\a\x45\x2\x2\x12F\x132\a\x12\x2\x2\x130\x132\a\x13\x2\x2"+
		"\x131\x127\x3\x2\x2\x2\x131\x12B\x3\x2\x2\x2\x131\x12D\x3\x2\x2\x2\x131"+
		"\x12F\x3\x2\x2\x2\x131\x130\x3\x2\x2\x2\x132\x37\x3\x2\x2\x2\x133\x134"+
		"\a\x45\x2\x2\x134\x135\a\x45\x2\x2\x135\x39\x3\x2\x2\x2\x136\x13F\x5\x34"+
		"\x1B\x2\x137\x138\a\x12\x2\x2\x138\x13F\x5:\x1E\x2\x139\x13A\a\x13\x2"+
		"\x2\x13A\x13F\x5:\x1E\x2\x13B\x13C\x5\x32\x1A\x2\x13C\x13D\x5X-\x2\x13D"+
		"\x13F\x3\x2\x2\x2\x13E\x136\x3\x2\x2\x2\x13E\x137\x3\x2\x2\x2\x13E\x139"+
		"\x3\x2\x2\x2\x13E\x13B\x3\x2\x2\x2\x13F;\x3\x2\x2\x2\x140\x143\x5\x38"+
		"\x1D\x2\x141\x143\x5:\x1E\x2\x142\x140\x3\x2\x2\x2\x142\x141\x3\x2\x2"+
		"\x2\x143=\x3\x2\x2\x2\x144\x145\x5<\x1F\x2\x145\x146\x5@!\x2\x146\x147"+
		"\x5\x42\"\x2\x147?\x3\x2\x2\x2\x148\x154\a:\x2\x2\x149\x154\a\x14\x2\x2"+
		"\x14A\x154\a\x15\x2\x2\x14B\x154\a\x16\x2\x2\x14C\x154\a\x17\x2\x2\x14D"+
		"\x154\a\x18\x2\x2\x14E\x154\a\x19\x2\x2\x14F\x154\a\x1A\x2\x2\x150\x154"+
		"\a\x1B\x2\x2\x151\x154\a\x1C\x2\x2\x152\x154\a\x1D\x2\x2\x153\x148\x3"+
		"\x2\x2\x2\x153\x149\x3\x2\x2\x2\x153\x14A\x3\x2\x2\x2\x153\x14B\x3\x2"+
		"\x2\x2\x153\x14C\x3\x2\x2\x2\x153\x14D\x3\x2\x2\x2\x153\x14E\x3\x2\x2"+
		"\x2\x153\x14F\x3\x2\x2\x2\x153\x150\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2"+
		"\x153\x152\x3\x2\x2\x2\x154\x41\x3\x2\x2\x2\x155\x15B\x5\x44#\x2\x156"+
		"\x157\a?\x2\x2\x157\x158\x5\x44#\x2\x158\x159\a\x30\x2\x2\x159\x15A\x5"+
		"\x44#\x2\x15A\x15C\x3\x2\x2\x2\x15B\x156\x3\x2\x2\x2\x15B\x15C\x3\x2\x2"+
		"\x2\x15C\x43\x3\x2\x2\x2\x15D\x162\x5\x46$\x2\x15E\x15F\a\x1E\x2\x2\x15F"+
		"\x161\x5\x46$\x2\x160\x15E\x3\x2\x2\x2\x161\x164\x3\x2\x2\x2\x162\x160"+
		"\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x45\x3\x2\x2\x2\x164\x162\x3\x2"+
		"\x2\x2\x165\x16A\x5H%\x2\x166\x167\a\x1F\x2\x2\x167\x169\x5H%\x2\x168"+
		"\x166\x3\x2\x2\x2\x169\x16C\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B"+
		"\x3\x2\x2\x2\x16BG\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16D\x172\x5J&\x2"+
		"\x16E\x16F\a \x2\x2\x16F\x171\x5J&\x2\x170\x16E\x3\x2\x2\x2\x171\x174"+
		"\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173I\x3\x2\x2"+
		"\x2\x174\x172\x3\x2\x2\x2\x175\x17A\x5L\'\x2\x176\x177\a!\x2\x2\x177\x179"+
		"\x5L\'\x2\x178\x176\x3\x2\x2\x2\x179\x17C\x3\x2\x2\x2\x17A\x178\x3\x2"+
		"\x2\x2\x17A\x17B\x3\x2\x2\x2\x17BK\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D"+
		"\x182\x5N(\x2\x17E\x17F\a@\x2\x2\x17F\x181\x5N(\x2\x180\x17E\x3\x2\x2"+
		"\x2\x181\x184\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2"+
		"\x183M\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x185\x18A\x5P)\x2\x186\x187\t"+
		"\x4\x2\x2\x187\x189\x5P)\x2\x188\x186\x3\x2\x2\x2\x189\x18C\x3\x2\x2\x2"+
		"\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18BO\x3\x2\x2\x2\x18C\x18A"+
		"\x3\x2\x2\x2\x18D\x192\x5R*\x2\x18E\x18F\t\x5\x2\x2\x18F\x191\x5R*\x2"+
		"\x190\x18E\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192"+
		"\x193\x3\x2\x2\x2\x193Q\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x195\x19A\x5"+
		"T+\x2\x196\x197\t\x6\x2\x2\x197\x199\x5T+\x2\x198\x196\x3\x2\x2\x2\x199"+
		"\x19C\x3\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19BS\x3"+
		"\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D\x1A2\x5V,\x2\x19E\x19F\t\a\x2\x2"+
		"\x19F\x1A1\x5V,\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A4\x3\x2\x2\x2\x1A2\x1A0"+
		"\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3U\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2"+
		"\x2\x1A5\x1AA\x5X-\x2\x1A6\x1A7\t\b\x2\x2\x1A7\x1A9\x5X-\x2\x1A8\x1A6"+
		"\x3\x2\x2\x2\x1A9\x1AC\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3"+
		"\x2\x2\x2\x1ABW\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD\x1AE\a\x36\x2\x2"+
		"\x1AE\x1AF\a\x45\x2\x2\x1AF\x1B0\a\x37\x2\x2\x1B0\x1B3\x5X-\x2\x1B1\x1B3"+
		"\x5:\x1E\x2\x1B2\x1AD\x3\x2\x2\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3Y\x3\x2\x2"+
		"\x2*^h\x81\x87\x8F\x96\x9E\xA8\xAE\xBE\xC1\xD4\xD8\xDC\xE0\xE4\xED\xF9"+
		"\xFF\x101\x10A\x10D\x118\x125\x131\x13E\x142\x153\x15B\x162\x16A\x172"+
		"\x17A\x182\x18A\x192\x19A\x1A2\x1AA\x1B2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
