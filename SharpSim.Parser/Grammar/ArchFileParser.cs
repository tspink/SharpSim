//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ArchFile.g by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class ArchFileParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, HEX_VAL=42, INT_CONST=43, FLOAT_CONST=44, 
		STRING=45, COLON=46, SEMICOLON=47, LBRACE=48, RBRACE=49, LCHEV=50, RCHEV=51, 
		LPAREN=52, RPAREN=53, LBRACKET=54, RBRACKET=55, EQ=56, PLUS=57, COMMA=58, 
		DOT=59, STAR=60, QMARK=61, AMPERSAND=62, ARCH=63, ISA=64, FORMAT=65, REGSPACE=66, 
		BANK=67, VECTOR=68, SLOT=69, BEHAVIOUR=70, HELPER=71, IDENT=72, WS=73;
	public const int
		RULE_start = 0, RULE_arch_ident = 1, RULE_def = 2, RULE_isa_block_def = 3, 
		RULE_format_def = 4, RULE_format_field_def = 5, RULE_regspace_def = 6, 
		RULE_reg_def = 7, RULE_reg_bank_def = 8, RULE_vector_reg_def = 9, RULE_reg_slot_def = 10, 
		RULE_behaviour_def = 11, RULE_helper_def = 12, RULE_prototype = 13, RULE_parameter_list = 14, 
		RULE_attr = 15, RULE_parameter = 16, RULE_fnbody = 17, RULE_statement = 18, 
		RULE_expression_statement = 19, RULE_flow_statement = 20, RULE_iteration_statement = 21, 
		RULE_selection_statement = 22, RULE_if_statement = 23, RULE_switch_statement = 24, 
		RULE_expression = 25, RULE_constant_expr = 26, RULE_argument_list = 27, 
		RULE_constant_number = 28, RULE_constant = 29, RULE_primary_expression = 30, 
		RULE_call_expression = 31, RULE_unary_operator = 32, RULE_postfix_expression = 33, 
		RULE_postfix_operator = 34, RULE_declaration = 35, RULE_unary_expression = 36, 
		RULE_lvalue = 37, RULE_full_assignment_expression = 38, RULE_assignment_operator = 39, 
		RULE_ternary_expression = 40, RULE_log_or_expression = 41, RULE_log_and_expression = 42, 
		RULE_bit_or_expression = 43, RULE_bit_xor_expression = 44, RULE_bit_and_expression = 45, 
		RULE_equality_expression = 46, RULE_comparison_expression = 47, RULE_shift_expression = 48, 
		RULE_add_expression = 49, RULE_mult_expression = 50, RULE_cast_expression = 51;
	public static readonly string[] ruleNames = {
		"start", "arch_ident", "def", "isa_block_def", "format_def", "format_field_def", 
		"regspace_def", "reg_def", "reg_bank_def", "vector_reg_def", "reg_slot_def", 
		"behaviour_def", "helper_def", "prototype", "parameter_list", "attr", 
		"parameter", "fnbody", "statement", "expression_statement", "flow_statement", 
		"iteration_statement", "selection_statement", "if_statement", "switch_statement", 
		"expression", "constant_expr", "argument_list", "constant_number", "constant", 
		"primary_expression", "call_expression", "unary_operator", "postfix_expression", 
		"postfix_operator", "declaration", "unary_expression", "lvalue", "full_assignment_expression", 
		"assignment_operator", "ternary_expression", "log_or_expression", "log_and_expression", 
		"bit_or_expression", "bit_xor_expression", "bit_and_expression", "equality_expression", 
		"comparison_expression", "shift_expression", "add_expression", "mult_expression", 
		"cast_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'noinline'", "'case'", "'default'", "'break'", "'continue'", "'return'", 
		"'while'", "'do'", "'for'", "'if'", "'else'", "'switch'", "'-'", "'~'", 
		"'!'", "'++'", "'--'", "'+='", "'-='", "'&='", "'*='", "'/='", "'%='", 
		"'<<='", "'>>='", "'^='", "'|='", "'||'", "'&&'", "'|'", "'^'", "'=='", 
		"'!='", "'<='", "'>='", "'<<<'", "'<<'", "'>>'", "'>>>'", "'/'", "'%'", 
		null, null, null, null, "':'", "';'", "'{'", "'}'", "'<'", "'>'", "'('", 
		"')'", "'['", "']'", "'='", "'+'", "','", "'.'", "'*'", "'?'", "'&'", 
		"'arch'", "'isa'", "'format'", "'regspace'", "'bank'", "'vector'", "'slot'", 
		"'behaviour'", "'helper'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "HEX_VAL", "INT_CONST", "FLOAT_CONST", 
		"STRING", "COLON", "SEMICOLON", "LBRACE", "RBRACE", "LCHEV", "RCHEV", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "EQ", "PLUS", "COMMA", "DOT", 
		"STAR", "QMARK", "AMPERSAND", "ARCH", "ISA", "FORMAT", "REGSPACE", "BANK", 
		"VECTOR", "SLOT", "BEHAVIOUR", "HELPER", "IDENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArchFile.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ArchFileParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public Arch_identContext arch_ident() {
			return GetRuleContext<Arch_identContext>(0);
		}
		public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; arch_ident();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ISA - 64)) | (1L << (REGSPACE - 64)) | (1L << (BEHAVIOUR - 64)) | (1L << (HELPER - 64)))) != 0)) {
				{
				{
				State = 105; def();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arch_identContext : ParserRuleContext {
		public ITerminalNode ARCH() { return GetToken(ArchFileParser.ARCH, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Arch_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arch_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterArch_ident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitArch_ident(this);
		}
	}

	[RuleVersion(0)]
	public Arch_identContext arch_ident() {
		Arch_identContext _localctx = new Arch_identContext(Context, State);
		EnterRule(_localctx, 2, RULE_arch_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(ARCH);
			State = 112; Match(IDENT);
			State = 113; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		public Isa_block_defContext isa_block_def() {
			return GetRuleContext<Isa_block_defContext>(0);
		}
		public Regspace_defContext regspace_def() {
			return GetRuleContext<Regspace_defContext>(0);
		}
		public Behaviour_defContext behaviour_def() {
			return GetRuleContext<Behaviour_defContext>(0);
		}
		public Helper_defContext helper_def() {
			return GetRuleContext<Helper_defContext>(0);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 4, RULE_def);
		try {
			State = 119;
			switch (TokenStream.La(1)) {
			case ISA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; isa_block_def();
				}
				break;
			case REGSPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; regspace_def();
				}
				break;
			case BEHAVIOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117; behaviour_def();
				}
				break;
			case HELPER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 118; helper_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Isa_block_defContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ISA() { return GetToken(ArchFileParser.ISA, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Format_defContext[] format_def() {
			return GetRuleContexts<Format_defContext>();
		}
		public Format_defContext format_def(int i) {
			return GetRuleContext<Format_defContext>(i);
		}
		public Isa_block_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isa_block_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIsa_block_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIsa_block_def(this);
		}
	}

	[RuleVersion(0)]
	public Isa_block_defContext isa_block_def() {
		Isa_block_defContext _localctx = new Isa_block_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_isa_block_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(ISA);
			State = 122; _localctx.name = Match(IDENT);
			State = 123; Match(LBRACE);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==FORMAT) {
				{
				{
				State = 124; format_def();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 130; Match(RBRACE);
			State = 131; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_defContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode FORMAT() { return GetToken(ArchFileParser.FORMAT, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Format_field_defContext[] format_field_def() {
			return GetRuleContexts<Format_field_defContext>();
		}
		public Format_field_defContext format_field_def(int i) {
			return GetRuleContext<Format_field_defContext>(i);
		}
		public Format_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFormat_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFormat_def(this);
		}
	}

	[RuleVersion(0)]
	public Format_defContext format_def() {
		Format_defContext _localctx = new Format_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_format_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(FORMAT);
			State = 134; _localctx.name = Match(IDENT);
			State = 135; Match(LBRACE);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==IDENT) {
				{
				{
				State = 136; format_field_def();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 142; Match(RBRACE);
			State = 143; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_field_defContext : ParserRuleContext {
		public IToken name;
		public Constant_numberContext width;
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Constant_numberContext constant_number() {
			return GetRuleContext<Constant_numberContext>(0);
		}
		public Format_field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_field_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFormat_field_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFormat_field_def(this);
		}
	}

	[RuleVersion(0)]
	public Format_field_defContext format_field_def() {
		Format_field_defContext _localctx = new Format_field_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_format_field_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; _localctx.name = Match(IDENT);
			State = 146; Match(COLON);
			State = 147; _localctx.width = constant_number();
			State = 148; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regspace_defContext : ParserRuleContext {
		public ITerminalNode REGSPACE() { return GetToken(ArchFileParser.REGSPACE, 0); }
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Reg_defContext[] reg_def() {
			return GetRuleContexts<Reg_defContext>();
		}
		public Reg_defContext reg_def(int i) {
			return GetRuleContext<Reg_defContext>(i);
		}
		public Regspace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regspace_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterRegspace_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitRegspace_def(this);
		}
	}

	[RuleVersion(0)]
	public Regspace_defContext regspace_def() {
		Regspace_defContext _localctx = new Regspace_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_regspace_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(REGSPACE);
			State = 151; Match(LBRACE);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (BANK - 67)) | (1L << (VECTOR - 67)) | (1L << (SLOT - 67)))) != 0)) {
				{
				{
				State = 152; reg_def();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 158; Match(RBRACE);
			State = 159; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg_defContext : ParserRuleContext {
		public Reg_bank_defContext reg_bank_def() {
			return GetRuleContext<Reg_bank_defContext>(0);
		}
		public Vector_reg_defContext vector_reg_def() {
			return GetRuleContext<Vector_reg_defContext>(0);
		}
		public Reg_slot_defContext reg_slot_def() {
			return GetRuleContext<Reg_slot_defContext>(0);
		}
		public Reg_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterReg_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitReg_def(this);
		}
	}

	[RuleVersion(0)]
	public Reg_defContext reg_def() {
		Reg_defContext _localctx = new Reg_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_reg_def);
		try {
			State = 164;
			switch (TokenStream.La(1)) {
			case BANK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; reg_bank_def();
				}
				break;
			case VECTOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; vector_reg_def();
				}
				break;
			case SLOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; reg_slot_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg_bank_defContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public Constant_numberContext count;
		public Constant_numberContext width;
		public Constant_numberContext stride;
		public Constant_numberContext offset;
		public ITerminalNode BANK() { return GetToken(ArchFileParser.BANK, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public Reg_bank_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg_bank_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterReg_bank_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitReg_bank_def(this);
		}
	}

	[RuleVersion(0)]
	public Reg_bank_defContext reg_bank_def() {
		Reg_bank_defContext _localctx = new Reg_bank_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_reg_bank_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(BANK);
			State = 167; _localctx.name = Match(IDENT);
			State = 168; Match(LPAREN);
			State = 169; _localctx.type = Match(IDENT);
			State = 170; Match(COMMA);
			State = 171; _localctx.count = constant_number();
			State = 172; Match(COMMA);
			State = 173; _localctx.width = constant_number();
			State = 174; Match(COMMA);
			State = 175; _localctx.stride = constant_number();
			State = 176; Match(COMMA);
			State = 177; _localctx.offset = constant_number();
			State = 178; Match(RPAREN);
			State = 179; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vector_reg_defContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public Constant_numberContext arity;
		public Constant_numberContext count;
		public Constant_numberContext width;
		public Constant_numberContext stride;
		public Constant_numberContext offset;
		public ITerminalNode VECTOR() { return GetToken(ArchFileParser.VECTOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public Vector_reg_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector_reg_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterVector_reg_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitVector_reg_def(this);
		}
	}

	[RuleVersion(0)]
	public Vector_reg_defContext vector_reg_def() {
		Vector_reg_defContext _localctx = new Vector_reg_defContext(Context, State);
		EnterRule(_localctx, 18, RULE_vector_reg_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(VECTOR);
			State = 182; _localctx.name = Match(IDENT);
			State = 183; Match(LPAREN);
			State = 184; _localctx.type = Match(IDENT);
			State = 185; Match(COMMA);
			State = 186; _localctx.arity = constant_number();
			State = 187; Match(COMMA);
			State = 188; _localctx.count = constant_number();
			State = 189; Match(COMMA);
			State = 190; _localctx.width = constant_number();
			State = 191; Match(COMMA);
			State = 192; _localctx.stride = constant_number();
			State = 193; Match(COMMA);
			State = 194; _localctx.offset = constant_number();
			State = 195; Match(RPAREN);
			State = 196; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg_slot_defContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public Constant_numberContext width;
		public Constant_numberContext offset;
		public IToken tag;
		public ITerminalNode SLOT() { return GetToken(ArchFileParser.SLOT, 0); }
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Constant_numberContext[] constant_number() {
			return GetRuleContexts<Constant_numberContext>();
		}
		public Constant_numberContext constant_number(int i) {
			return GetRuleContext<Constant_numberContext>(i);
		}
		public Reg_slot_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg_slot_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterReg_slot_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitReg_slot_def(this);
		}
	}

	[RuleVersion(0)]
	public Reg_slot_defContext reg_slot_def() {
		Reg_slot_defContext _localctx = new Reg_slot_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_reg_slot_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(SLOT);
			State = 199; _localctx.name = Match(IDENT);
			State = 200; Match(LPAREN);
			State = 201; _localctx.type = Match(IDENT);
			State = 202; Match(COMMA);
			State = 203; _localctx.width = constant_number();
			State = 204; Match(COMMA);
			State = 205; _localctx.offset = constant_number();
			State = 206; Match(RPAREN);
			State = 208;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 207; _localctx.tag = Match(IDENT);
				}
			}

			State = 210; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Behaviour_defContext : ParserRuleContext {
		public IToken isa;
		public IToken type;
		public IToken name;
		public ITerminalNode BEHAVIOUR() { return GetToken(ArchFileParser.BEHAVIOUR, 0); }
		public ITerminalNode LCHEV() { return GetToken(ArchFileParser.LCHEV, 0); }
		public ITerminalNode DOT() { return GetToken(ArchFileParser.DOT, 0); }
		public ITerminalNode RCHEV() { return GetToken(ArchFileParser.RCHEV, 0); }
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Behaviour_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviour_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBehaviour_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBehaviour_def(this);
		}
	}

	[RuleVersion(0)]
	public Behaviour_defContext behaviour_def() {
		Behaviour_defContext _localctx = new Behaviour_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_behaviour_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(BEHAVIOUR);
			State = 213; Match(LCHEV);
			State = 214; _localctx.isa = Match(IDENT);
			State = 215; Match(DOT);
			State = 216; _localctx.type = Match(IDENT);
			State = 217; Match(RCHEV);
			State = 218; _localctx.name = Match(IDENT);
			State = 219; fnbody();
			State = 220; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Helper_defContext : ParserRuleContext {
		public ITerminalNode HELPER() { return GetToken(ArchFileParser.HELPER, 0); }
		public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public Helper_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helper_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterHelper_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitHelper_def(this);
		}
	}

	[RuleVersion(0)]
	public Helper_defContext helper_def() {
		Helper_defContext _localctx = new Helper_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_helper_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(HELPER);
			State = 223; prototype();
			State = 224; fnbody();
			State = 225; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		public IToken rtype;
		public IToken name;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; _localctx.rtype = Match(IDENT);
			State = 228; _localctx.name = Match(IDENT);
			State = 229; Match(LPAREN);
			State = 231;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 230; parameter_list();
				}
			}

			State = 233; Match(RPAREN);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0) {
				{
				{
				State = 234; attr();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; parameter();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 241; Match(COMMA);
				State = 242; parameter();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public IToken T;
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 30, RULE_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; _localctx.T = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken type;
		public IToken @ref;
		public IToken name;
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(ArchFileParser.AMPERSAND, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; _localctx.type = Match(IDENT);
			State = 252;
			_la = TokenStream.La(1);
			if (_la==AMPERSAND) {
				{
				State = 251; _localctx.@ref = Match(AMPERSAND);
				}
			}

			State = 254; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnbodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(ArchFileParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ArchFileParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FnbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFnbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFnbody(this);
		}
	}

	[RuleVersion(0)]
	public FnbodyContext fnbody() {
		FnbodyContext _localctx = new FnbodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_fnbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(LBRACE);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << HEX_VAL) | (1L << INT_CONST) | (1L << FLOAT_CONST) | (1L << STRING) | (1L << SEMICOLON) | (1L << LBRACE) | (1L << LPAREN) | (1L << PLUS) | (1L << STAR) | (1L << AMPERSAND))) != 0) || _la==IDENT) {
				{
				{
				State = 257; statement();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 263; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Flow_statementContext flow_statement() {
			return GetRuleContext<Flow_statementContext>(0);
		}
		public FnbodyContext fnbody() {
			return GetRuleContext<FnbodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 270;
			switch (TokenStream.La(1)) {
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case SEMICOLON:
			case LPAREN:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; expression_statement();
				}
				break;
			case T__9:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; selection_statement();
				}
				break;
			case T__6:
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; iteration_statement();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268; flow_statement();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 269; fnbody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression_statement);
		try {
			State = 276;
			switch (TokenStream.La(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(SEMICOLON);
				}
				break;
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case LPAREN:
			case PLUS:
			case STAR:
			case AMPERSAND:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; expression();
				State = 274; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_statementContext : ParserRuleContext {
		public IToken S;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ArchFileParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Flow_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFlow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFlow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Flow_statementContext flow_statement() {
		Flow_statementContext _localctx = new Flow_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_flow_statement);
		int _la;
		try {
			State = 295;
			switch (TokenStream.La(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; _localctx.S = Match(T__1);
				State = 279; constant();
				State = 280; Match(COLON);
				State = 281; statement();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; _localctx.S = Match(T__2);
				State = 284; Match(COLON);
				State = 285; statement();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; _localctx.S = Match(T__3);
				State = 287; Match(SEMICOLON);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 288; _localctx.S = Match(T__4);
				State = 289; Match(SEMICOLON);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 290; _localctx.S = Match(T__5);
				State = 292;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 291; expression();
					}
				}

				State = 294; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(ArchFileParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(ArchFileParser.SEMICOLON, i);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_iteration_statement);
		int _la;
		try {
			State = 326;
			switch (TokenStream.La(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297; Match(T__6);
				State = 298; Match(LPAREN);
				State = 299; expression();
				State = 300; Match(RPAREN);
				State = 301; statement();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; Match(T__7);
				State = 304; statement();
				State = 305; Match(T__6);
				State = 306; Match(LPAREN);
				State = 307; expression();
				State = 308; Match(RPAREN);
				State = 309; Match(SEMICOLON);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311; Match(T__8);
				State = 312; Match(LPAREN);
				State = 314;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 313; expression();
					}
				}

				State = 316; Match(SEMICOLON);
				State = 318;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 317; expression();
					}
				}

				State = 320; Match(SEMICOLON);
				State = 322;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
					{
					State = 321; expression();
					}
				}

				State = 324; Match(RPAREN);
				State = 325; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_selection_statement);
		try {
			State = 330;
			switch (TokenStream.La(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; if_statement();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public IToken KW;
		public ExpressionContext cond;
		public StatementContext tt;
		public StatementContext ft;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; _localctx.KW = Match(T__9);
			State = 333; Match(LPAREN);
			State = 334; _localctx.cond = expression();
			State = 335; Match(RPAREN);
			State = 336; _localctx.tt = statement();
			State = 339;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 337; Match(T__10);
				State = 338; _localctx.ft = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public IToken KW;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; _localctx.KW = Match(T__11);
			State = 342; Match(LPAREN);
			State = 343; expression();
			State = 344; Match(RPAREN);
			State = 345; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Ternary_expressionContext rvalue;
		public Ternary_expressionContext expr;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Ternary_expressionContext[] ternary_expression() {
			return GetRuleContexts<Ternary_expressionContext>();
		}
		public Ternary_expressionContext ternary_expression(int i) {
			return GetRuleContext<Ternary_expressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		int _la;
		try {
			State = 359;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; declaration();
				State = 351;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << EQ))) != 0)) {
					{
					State = 348; assignment_operator();
					State = 349; _localctx.rvalue = ternary_expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; _localctx.expr = ternary_expression();
				State = 357;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << EQ))) != 0)) {
					{
					State = 354; assignment_operator();
					State = 355; _localctx.rvalue = ternary_expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_exprContext : ParserRuleContext {
		public Log_or_expressionContext log_or_expression() {
			return GetRuleContext<Log_or_expressionContext>(0);
		}
		public Constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Constant_exprContext constant_expr() {
		Constant_exprContext _localctx = new Constant_exprContext(Context, State);
		EnterRule(_localctx, 52, RULE_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; log_or_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ArchFileParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ArchFileParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 54, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.La(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (T__12 - 13)) | (1L << (T__13 - 13)) | (1L << (T__14 - 13)) | (1L << (T__15 - 13)) | (1L << (T__16 - 13)) | (1L << (HEX_VAL - 13)) | (1L << (INT_CONST - 13)) | (1L << (FLOAT_CONST - 13)) | (1L << (STRING - 13)) | (1L << (LPAREN - 13)) | (1L << (PLUS - 13)) | (1L << (STAR - 13)) | (1L << (AMPERSAND - 13)) | (1L << (IDENT - 13)))) != 0)) {
				{
				State = 363; expression();
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 364; Match(COMMA);
					State = 365; expression();
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_numberContext : ParserRuleContext {
		public ITerminalNode HEX_VAL() { return GetToken(ArchFileParser.HEX_VAL, 0); }
		public ITerminalNode INT_CONST() { return GetToken(ArchFileParser.INT_CONST, 0); }
		public ITerminalNode FLOAT_CONST() { return GetToken(ArchFileParser.FLOAT_CONST, 0); }
		public Constant_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant_number(this);
		}
	}

	[RuleVersion(0)]
	public Constant_numberContext constant_number() {
		Constant_numberContext _localctx = new Constant_numberContext(Context, State);
		EnterRule(_localctx, 56, RULE_constant_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HEX_VAL) | (1L << INT_CONST) | (1L << FLOAT_CONST))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public Constant_numberContext constant_number() {
			return GetRuleContext<Constant_numberContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(ArchFileParser.STRING, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 58, RULE_constant);
		try {
			State = 377;
			switch (TokenStream.La(1)) {
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375; constant_number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public IToken sym;
		public ConstantContext imm;
		public ExpressionContext expr;
		public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_primary_expression);
		try {
			State = 386;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; call_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; _localctx.sym = Match(IDENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; _localctx.imm = constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382; Match(LPAREN);
				State = 383; _localctx.expr = expression();
				State = 384; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public IToken fn;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		Call_expressionContext _localctx = new Call_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_call_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; _localctx.fn = Match(IDENT);
			State = 389; Match(LPAREN);
			State = 390; argument_list();
			State = 391; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << PLUS) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Postfix_operatorContext postfix_operator() {
			return GetRuleContext<Postfix_operatorContext>(0);
		}
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPostfix_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPostfix_expression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_postfix_expression);
		try {
			State = 399;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 395; primary_expression();
				State = 396; postfix_operator();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398; primary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_operatorContext : ParserRuleContext {
		public IToken member;
		public IToken symbol;
		public ITerminalNode LBRACKET() { return GetToken(ArchFileParser.LBRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(ArchFileParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(ArchFileParser.DOT, 0); }
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public ITerminalNode STAR() { return GetToken(ArchFileParser.STAR, 0); }
		public Postfix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterPostfix_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitPostfix_operator(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_operatorContext postfix_operator() {
		Postfix_operatorContext _localctx = new Postfix_operatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_postfix_operator);
		try {
			State = 411;
			switch (TokenStream.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401; Match(LBRACKET);
				State = 402; expression();
				State = 403; Match(RBRACKET);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; Match(DOT);
				State = 406; _localctx.member = Match(IDENT);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; Match(STAR);
				State = 408; _localctx.symbol = Match(IDENT);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 409; Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 410; Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public IToken type;
		public IToken name;
		public ITerminalNode[] IDENT() { return GetTokens(ArchFileParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ArchFileParser.IDENT, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; _localctx.type = Match(IDENT);
			State = 414; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_unary_expression);
		try {
			State = 424;
			switch (TokenStream.La(1)) {
			case HEX_VAL:
			case INT_CONST:
			case FLOAT_CONST:
			case STRING:
			case LPAREN:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; postfix_expression();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; Match(T__15);
				State = 418; unary_expression();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 419; Match(T__16);
				State = 420; unary_expression();
				}
				break;
			case T__12:
			case T__13:
			case T__14:
			case PLUS:
			case STAR:
			case AMPERSAND:
				EnterOuterAlt(_localctx, 4);
				{
				State = 421; unary_operator();
				State = 422; cast_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLvalue(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 74, RULE_lvalue);
		try {
			State = 428;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_assignment_expressionContext : ParserRuleContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Ternary_expressionContext ternary_expression() {
			return GetRuleContext<Ternary_expressionContext>(0);
		}
		public Full_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterFull_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitFull_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Full_assignment_expressionContext full_assignment_expression() {
		Full_assignment_expressionContext _localctx = new Full_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_full_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; lvalue();
			State = 431; assignment_operator();
			State = 432; ternary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public IToken S;
		public ITerminalNode EQ() { return GetToken(ArchFileParser.EQ, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_assignment_operator);
		try {
			State = 445;
			switch (TokenStream.La(1)) {
			case EQ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434; _localctx.S = Match(EQ);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435; _localctx.S = Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436; _localctx.S = Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 437; _localctx.S = Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 5);
				{
				State = 438; _localctx.S = Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 6);
				{
				State = 439; _localctx.S = Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 7);
				{
				State = 440; _localctx.S = Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 8);
				{
				State = 441; _localctx.S = Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 9);
				{
				State = 442; _localctx.S = Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 10);
				{
				State = 443; _localctx.S = Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 11);
				{
				State = 444; _localctx.S = Match(T__26);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ternary_expressionContext : ParserRuleContext {
		public Log_or_expressionContext cond;
		public Log_or_expressionContext left;
		public Log_or_expressionContext right;
		public Log_or_expressionContext[] log_or_expression() {
			return GetRuleContexts<Log_or_expressionContext>();
		}
		public Log_or_expressionContext log_or_expression(int i) {
			return GetRuleContext<Log_or_expressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(ArchFileParser.QMARK, 0); }
		public ITerminalNode COLON() { return GetToken(ArchFileParser.COLON, 0); }
		public Ternary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterTernary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitTernary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ternary_expressionContext ternary_expression() {
		Ternary_expressionContext _localctx = new Ternary_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_ternary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; _localctx.cond = log_or_expression();
			State = 453;
			_la = TokenStream.La(1);
			if (_la==QMARK) {
				{
				State = 448; Match(QMARK);
				State = 449; _localctx.left = log_or_expression();
				State = 450; Match(COLON);
				State = 451; _localctx.right = log_or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_or_expressionContext : ParserRuleContext {
		public Log_and_expressionContext L;
		public IToken P;
		public Log_and_expressionContext R;
		public Log_and_expressionContext[] log_and_expression() {
			return GetRuleContexts<Log_and_expressionContext>();
		}
		public Log_and_expressionContext log_and_expression(int i) {
			return GetRuleContext<Log_and_expressionContext>(i);
		}
		public Log_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLog_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLog_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Log_or_expressionContext log_or_expression() {
		Log_or_expressionContext _localctx = new Log_or_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_log_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; _localctx.L = log_and_expression();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__27) {
				{
				{
				State = 456; _localctx.P = Match(T__27);
				State = 457; _localctx.R = log_and_expression();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_and_expressionContext : ParserRuleContext {
		public Bit_or_expressionContext L;
		public IToken P;
		public Bit_or_expressionContext R;
		public Bit_or_expressionContext[] bit_or_expression() {
			return GetRuleContexts<Bit_or_expressionContext>();
		}
		public Bit_or_expressionContext bit_or_expression(int i) {
			return GetRuleContext<Bit_or_expressionContext>(i);
		}
		public Log_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterLog_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitLog_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Log_and_expressionContext log_and_expression() {
		Log_and_expressionContext _localctx = new Log_and_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_log_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; _localctx.L = bit_or_expression();
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__28) {
				{
				{
				State = 464; _localctx.P = Match(T__28);
				State = 465; _localctx.R = bit_or_expression();
				}
				}
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_or_expressionContext : ParserRuleContext {
		public Bit_xor_expressionContext L;
		public IToken P;
		public Bit_xor_expressionContext R;
		public Bit_xor_expressionContext[] bit_xor_expression() {
			return GetRuleContexts<Bit_xor_expressionContext>();
		}
		public Bit_xor_expressionContext bit_xor_expression(int i) {
			return GetRuleContext<Bit_xor_expressionContext>(i);
		}
		public Bit_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_or_expressionContext bit_or_expression() {
		Bit_or_expressionContext _localctx = new Bit_or_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_bit_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; _localctx.L = bit_xor_expression();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__29) {
				{
				{
				State = 472; _localctx.P = Match(T__29);
				State = 473; _localctx.R = bit_xor_expression();
				}
				}
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_xor_expressionContext : ParserRuleContext {
		public Bit_and_expressionContext L;
		public IToken P;
		public Bit_and_expressionContext R;
		public Bit_and_expressionContext[] bit_and_expression() {
			return GetRuleContexts<Bit_and_expressionContext>();
		}
		public Bit_and_expressionContext bit_and_expression(int i) {
			return GetRuleContext<Bit_and_expressionContext>(i);
		}
		public Bit_xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_xor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_xor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_xor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_xor_expressionContext bit_xor_expression() {
		Bit_xor_expressionContext _localctx = new Bit_xor_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_bit_xor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; _localctx.L = bit_and_expression();
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__30) {
				{
				{
				State = 480; _localctx.P = Match(T__30);
				State = 481; _localctx.R = bit_and_expression();
				}
				}
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		public Equality_expressionContext L;
		public IToken P;
		public Equality_expressionContext R;
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterBit_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitBit_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_bit_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; _localctx.L = equality_expression();
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AMPERSAND) {
				{
				{
				State = 488; _localctx.P = Match(AMPERSAND);
				State = 489; _localctx.R = equality_expression();
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Comparison_expressionContext L;
		public IToken P;
		public Comparison_expressionContext R;
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; _localctx.L = comparison_expression();
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__31 || _la==T__32) {
				{
				{
				State = 496;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==T__31 || _la==T__32) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 497; _localctx.R = comparison_expression();
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Shift_expressionContext L;
		public IToken P;
		public Shift_expressionContext R;
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_comparison_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; _localctx.L = shift_expression();
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__33) | (1L << T__34) | (1L << LCHEV) | (1L << RCHEV))) != 0)) {
				{
				{
				State = 504;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__33) | (1L << T__34) | (1L << LCHEV) | (1L << RCHEV))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 505; _localctx.R = shift_expression();
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Add_expressionContext L;
		public IToken P;
		public Add_expressionContext R;
		public Add_expressionContext[] add_expression() {
			return GetRuleContexts<Add_expressionContext>();
		}
		public Add_expressionContext add_expression(int i) {
			return GetRuleContext<Add_expressionContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_shift_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; _localctx.L = add_expression();
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) {
				{
				{
				State = 512;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 513; _localctx.R = add_expression();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_expressionContext : ParserRuleContext {
		public Mult_expressionContext L;
		public IToken P;
		public Mult_expressionContext R;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Add_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterAdd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitAdd_expression(this);
		}
	}

	[RuleVersion(0)]
	public Add_expressionContext add_expression() {
		Add_expressionContext _localctx = new Add_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_add_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; _localctx.L = mult_expression();
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__12 || _la==PLUS) {
				{
				{
				State = 520;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==T__12 || _la==PLUS) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 521; _localctx.R = mult_expression();
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_expressionContext : ParserRuleContext {
		public Cast_expressionContext L;
		public IToken P;
		public Cast_expressionContext R;
		public Cast_expressionContext[] cast_expression() {
			return GetRuleContexts<Cast_expressionContext>();
		}
		public Cast_expressionContext cast_expression(int i) {
			return GetRuleContext<Cast_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; _localctx.L = cast_expression();
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << STAR))) != 0)) {
				{
				{
				State = 528;
				_localctx.P = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << STAR))) != 0)) ) {
					_localctx.P = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 529; _localctx.R = cast_expression();
				}
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public IToken type;
		public Unary_expressionContext expr;
		public ITerminalNode LPAREN() { return GetToken(ArchFileParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ArchFileParser.RPAREN, 0); }
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ArchFileParser.IDENT, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArchFileListener typedListener = listener as IArchFileListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_cast_expression);
		try {
			State = 540;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535; Match(LPAREN);
				State = 536; _localctx.type = Match(IDENT);
				State = 537; Match(RPAREN);
				State = 538; cast_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 539; _localctx.expr = unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3K\x221\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x3\x2\x3\x2\a\x2m\n\x2\f"+
		"\x2\xE\x2p\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"z\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x80\n\x5\f\x5\xE\x5\x83\v\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x8C\n\x6\f\x6\xE\x6\x8F\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\a\b\x9C\n\b"+
		"\f\b\xE\b\x9F\v\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x5\t\xA7\n\t\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xD3"+
		"\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xEA\n\xF\x3\xF"+
		"\x3\xF\a\xF\xEE\n\xF\f\xF\xE\xF\xF1\v\xF\x3\x10\x3\x10\x3\x10\a\x10\xF6"+
		"\n\x10\f\x10\xE\x10\xF9\v\x10\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\xFF\n"+
		"\x12\x3\x12\x3\x12\x3\x13\x3\x13\a\x13\x105\n\x13\f\x13\xE\x13\x108\v"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x111\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x117\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x5\x16\x127\n\x16\x3\x16\x5\x16\x12A\n\x16\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x5\x17\x13D\n\x17\x3\x17\x3\x17\x5\x17\x141"+
		"\n\x17\x3\x17\x3\x17\x5\x17\x145\n\x17\x3\x17\x3\x17\x5\x17\x149\n\x17"+
		"\x3\x18\x3\x18\x5\x18\x14D\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x5\x19\x156\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x162\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x168\n\x1B\x5\x1B\x16A\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\a\x1D\x171\n\x1D\f\x1D\xE\x1D\x174\v\x1D\x5\x1D\x176\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x17C\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5"+
		" \x185\n \x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x192\n#\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x19E\n$\x3%\x3%\x3%\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x1AB\n&\x3\'\x3\'\x5\'\x1AF\n\'\x3(\x3(\x3"+
		"(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x1C0\n)\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x5*\x1C8\n*\x3+\x3+\x3+\a+\x1CD\n+\f+\xE+\x1D0\v+\x3"+
		",\x3,\x3,\a,\x1D5\n,\f,\xE,\x1D8\v,\x3-\x3-\x3-\a-\x1DD\n-\f-\xE-\x1E0"+
		"\v-\x3.\x3.\x3.\a.\x1E5\n.\f.\xE.\x1E8\v.\x3/\x3/\x3/\a/\x1ED\n/\f/\xE"+
		"/\x1F0\v/\x3\x30\x3\x30\x3\x30\a\x30\x1F5\n\x30\f\x30\xE\x30\x1F8\v\x30"+
		"\x3\x31\x3\x31\x3\x31\a\x31\x1FD\n\x31\f\x31\xE\x31\x200\v\x31\x3\x32"+
		"\x3\x32\x3\x32\a\x32\x205\n\x32\f\x32\xE\x32\x208\v\x32\x3\x33\x3\x33"+
		"\x3\x33\a\x33\x20D\n\x33\f\x33\xE\x33\x210\v\x33\x3\x34\x3\x34\x3\x34"+
		"\a\x34\x215\n\x34\f\x34\xE\x34\x218\v\x34\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x21F\n\x35\x3\x35\x2\x2\x36\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66h\x2\t\x3\x2,.\x6\x2\xF\x11;;>>@@\x3\x2\"#\x4\x2"+
		"$%\x34\x35\x3\x2&)\x4\x2\xF\xF;;\x4\x2*+>>\x234\x2j\x3\x2\x2\x2\x4q\x3"+
		"\x2\x2\x2\x6y\x3\x2\x2\x2\b{\x3\x2\x2\x2\n\x87\x3\x2\x2\x2\f\x93\x3\x2"+
		"\x2\x2\xE\x98\x3\x2\x2\x2\x10\xA6\x3\x2\x2\x2\x12\xA8\x3\x2\x2\x2\x14"+
		"\xB7\x3\x2\x2\x2\x16\xC8\x3\x2\x2\x2\x18\xD6\x3\x2\x2\x2\x1A\xE0\x3\x2"+
		"\x2\x2\x1C\xE5\x3\x2\x2\x2\x1E\xF2\x3\x2\x2\x2 \xFA\x3\x2\x2\x2\"\xFC"+
		"\x3\x2\x2\x2$\x102\x3\x2\x2\x2&\x110\x3\x2\x2\x2(\x116\x3\x2\x2\x2*\x129"+
		"\x3\x2\x2\x2,\x148\x3\x2\x2\x2.\x14C\x3\x2\x2\x2\x30\x14E\x3\x2\x2\x2"+
		"\x32\x157\x3\x2\x2\x2\x34\x169\x3\x2\x2\x2\x36\x16B\x3\x2\x2\x2\x38\x175"+
		"\x3\x2\x2\x2:\x177\x3\x2\x2\x2<\x17B\x3\x2\x2\x2>\x184\x3\x2\x2\x2@\x186"+
		"\x3\x2\x2\x2\x42\x18B\x3\x2\x2\x2\x44\x191\x3\x2\x2\x2\x46\x19D\x3\x2"+
		"\x2\x2H\x19F\x3\x2\x2\x2J\x1AA\x3\x2\x2\x2L\x1AE\x3\x2\x2\x2N\x1B0\x3"+
		"\x2\x2\x2P\x1BF\x3\x2\x2\x2R\x1C1\x3\x2\x2\x2T\x1C9\x3\x2\x2\x2V\x1D1"+
		"\x3\x2\x2\x2X\x1D9\x3\x2\x2\x2Z\x1E1\x3\x2\x2\x2\\\x1E9\x3\x2\x2\x2^\x1F1"+
		"\x3\x2\x2\x2`\x1F9\x3\x2\x2\x2\x62\x201\x3\x2\x2\x2\x64\x209\x3\x2\x2"+
		"\x2\x66\x211\x3\x2\x2\x2h\x21E\x3\x2\x2\x2jn\x5\x4\x3\x2km\x5\x6\x4\x2"+
		"lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2o\x3\x3\x2\x2"+
		"\x2pn\x3\x2\x2\x2qr\a\x41\x2\x2rs\aJ\x2\x2st\a\x31\x2\x2t\x5\x3\x2\x2"+
		"\x2uz\x5\b\x5\x2vz\x5\xE\b\x2wz\x5\x18\r\x2xz\x5\x1A\xE\x2yu\x3\x2\x2"+
		"\x2yv\x3\x2\x2\x2yw\x3\x2\x2\x2yx\x3\x2\x2\x2z\a\x3\x2\x2\x2{|\a\x42\x2"+
		"\x2|}\aJ\x2\x2}\x81\a\x32\x2\x2~\x80\x5\n\x6\x2\x7F~\x3\x2\x2\x2\x80\x83"+
		"\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x84\x3\x2\x2"+
		"\x2\x83\x81\x3\x2\x2\x2\x84\x85\a\x33\x2\x2\x85\x86\a\x31\x2\x2\x86\t"+
		"\x3\x2\x2\x2\x87\x88\a\x43\x2\x2\x88\x89\aJ\x2\x2\x89\x8D\a\x32\x2\x2"+
		"\x8A\x8C\x5\f\a\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3"+
		"\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x90\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2"+
		"\x90\x91\a\x33\x2\x2\x91\x92\a\x31\x2\x2\x92\v\x3\x2\x2\x2\x93\x94\aJ"+
		"\x2\x2\x94\x95\a\x30\x2\x2\x95\x96\x5:\x1E\x2\x96\x97\a\x31\x2\x2\x97"+
		"\r\x3\x2\x2\x2\x98\x99\a\x44\x2\x2\x99\x9D\a\x32\x2\x2\x9A\x9C\x5\x10"+
		"\t\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D"+
		"\x9E\x3\x2\x2\x2\x9E\xA0\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA1\a\x33"+
		"\x2\x2\xA1\xA2\a\x31\x2\x2\xA2\xF\x3\x2\x2\x2\xA3\xA7\x5\x12\n\x2\xA4"+
		"\xA7\x5\x14\v\x2\xA5\xA7\x5\x16\f\x2\xA6\xA3\x3\x2\x2\x2\xA6\xA4\x3\x2"+
		"\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7\x11\x3\x2\x2\x2\xA8\xA9\a\x45\x2\x2\xA9"+
		"\xAA\aJ\x2\x2\xAA\xAB\a\x36\x2\x2\xAB\xAC\aJ\x2\x2\xAC\xAD\a<\x2\x2\xAD"+
		"\xAE\x5:\x1E\x2\xAE\xAF\a<\x2\x2\xAF\xB0\x5:\x1E\x2\xB0\xB1\a<\x2\x2\xB1"+
		"\xB2\x5:\x1E\x2\xB2\xB3\a<\x2\x2\xB3\xB4\x5:\x1E\x2\xB4\xB5\a\x37\x2\x2"+
		"\xB5\xB6\a\x31\x2\x2\xB6\x13\x3\x2\x2\x2\xB7\xB8\a\x46\x2\x2\xB8\xB9\a"+
		"J\x2\x2\xB9\xBA\a\x36\x2\x2\xBA\xBB\aJ\x2\x2\xBB\xBC\a<\x2\x2\xBC\xBD"+
		"\x5:\x1E\x2\xBD\xBE\a<\x2\x2\xBE\xBF\x5:\x1E\x2\xBF\xC0\a<\x2\x2\xC0\xC1"+
		"\x5:\x1E\x2\xC1\xC2\a<\x2\x2\xC2\xC3\x5:\x1E\x2\xC3\xC4\a<\x2\x2\xC4\xC5"+
		"\x5:\x1E\x2\xC5\xC6\a\x37\x2\x2\xC6\xC7\a\x31\x2\x2\xC7\x15\x3\x2\x2\x2"+
		"\xC8\xC9\aG\x2\x2\xC9\xCA\aJ\x2\x2\xCA\xCB\a\x36\x2\x2\xCB\xCC\aJ\x2\x2"+
		"\xCC\xCD\a<\x2\x2\xCD\xCE\x5:\x1E\x2\xCE\xCF\a<\x2\x2\xCF\xD0\x5:\x1E"+
		"\x2\xD0\xD2\a\x37\x2\x2\xD1\xD3\aJ\x2\x2\xD2\xD1\x3\x2\x2\x2\xD2\xD3\x3"+
		"\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\a\x31\x2\x2\xD5\x17\x3\x2\x2\x2"+
		"\xD6\xD7\aH\x2\x2\xD7\xD8\a\x34\x2\x2\xD8\xD9\aJ\x2\x2\xD9\xDA\a=\x2\x2"+
		"\xDA\xDB\aJ\x2\x2\xDB\xDC\a\x35\x2\x2\xDC\xDD\aJ\x2\x2\xDD\xDE\x5$\x13"+
		"\x2\xDE\xDF\a\x31\x2\x2\xDF\x19\x3\x2\x2\x2\xE0\xE1\aI\x2\x2\xE1\xE2\x5"+
		"\x1C\xF\x2\xE2\xE3\x5$\x13\x2\xE3\xE4\a\x31\x2\x2\xE4\x1B\x3\x2\x2\x2"+
		"\xE5\xE6\aJ\x2\x2\xE6\xE7\aJ\x2\x2\xE7\xE9\a\x36\x2\x2\xE8\xEA\x5\x1E"+
		"\x10\x2\xE9\xE8\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB"+
		"\xEF\a\x37\x2\x2\xEC\xEE\x5 \x11\x2\xED\xEC\x3\x2\x2\x2\xEE\xF1\x3\x2"+
		"\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\x1D\x3\x2\x2\x2\xF1"+
		"\xEF\x3\x2\x2\x2\xF2\xF7\x5\"\x12\x2\xF3\xF4\a<\x2\x2\xF4\xF6\x5\"\x12"+
		"\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8"+
		"\x3\x2\x2\x2\xF8\x1F\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFB\a\x3\x2\x2"+
		"\xFB!\x3\x2\x2\x2\xFC\xFE\aJ\x2\x2\xFD\xFF\a@\x2\x2\xFE\xFD\x3\x2\x2\x2"+
		"\xFE\xFF\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101\aJ\x2\x2\x101#\x3"+
		"\x2\x2\x2\x102\x106\a\x32\x2\x2\x103\x105\x5&\x14\x2\x104\x103\x3\x2\x2"+
		"\x2\x105\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2"+
		"\x107\x109\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A\a\x33\x2\x2\x10A"+
		"%\x3\x2\x2\x2\x10B\x111\x5(\x15\x2\x10C\x111\x5.\x18\x2\x10D\x111\x5,"+
		"\x17\x2\x10E\x111\x5*\x16\x2\x10F\x111\x5$\x13\x2\x110\x10B\x3\x2\x2\x2"+
		"\x110\x10C\x3\x2\x2\x2\x110\x10D\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110"+
		"\x10F\x3\x2\x2\x2\x111\'\x3\x2\x2\x2\x112\x117\a\x31\x2\x2\x113\x114\x5"+
		"\x34\x1B\x2\x114\x115\a\x31\x2\x2\x115\x117\x3\x2\x2\x2\x116\x112\x3\x2"+
		"\x2\x2\x116\x113\x3\x2\x2\x2\x117)\x3\x2\x2\x2\x118\x119\a\x4\x2\x2\x119"+
		"\x11A\x5<\x1F\x2\x11A\x11B\a\x30\x2\x2\x11B\x11C\x5&\x14\x2\x11C\x12A"+
		"\x3\x2\x2\x2\x11D\x11E\a\x5\x2\x2\x11E\x11F\a\x30\x2\x2\x11F\x12A\x5&"+
		"\x14\x2\x120\x121\a\x6\x2\x2\x121\x12A\a\x31\x2\x2\x122\x123\a\a\x2\x2"+
		"\x123\x12A\a\x31\x2\x2\x124\x126\a\b\x2\x2\x125\x127\x5\x34\x1B\x2\x126"+
		"\x125\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x12A"+
		"\a\x31\x2\x2\x129\x118\x3\x2\x2\x2\x129\x11D\x3\x2\x2\x2\x129\x120\x3"+
		"\x2\x2\x2\x129\x122\x3\x2\x2\x2\x129\x124\x3\x2\x2\x2\x12A+\x3\x2\x2\x2"+
		"\x12B\x12C\a\t\x2\x2\x12C\x12D\a\x36\x2\x2\x12D\x12E\x5\x34\x1B\x2\x12E"+
		"\x12F\a\x37\x2\x2\x12F\x130\x5&\x14\x2\x130\x149\x3\x2\x2\x2\x131\x132"+
		"\a\n\x2\x2\x132\x133\x5&\x14\x2\x133\x134\a\t\x2\x2\x134\x135\a\x36\x2"+
		"\x2\x135\x136\x5\x34\x1B\x2\x136\x137\a\x37\x2\x2\x137\x138\a\x31\x2\x2"+
		"\x138\x149\x3\x2\x2\x2\x139\x13A\a\v\x2\x2\x13A\x13C\a\x36\x2\x2\x13B"+
		"\x13D\x5\x34\x1B\x2\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E"+
		"\x3\x2\x2\x2\x13E\x140\a\x31\x2\x2\x13F\x141\x5\x34\x1B\x2\x140\x13F\x3"+
		"\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x144\a\x31"+
		"\x2\x2\x143\x145\x5\x34\x1B\x2\x144\x143\x3\x2\x2\x2\x144\x145\x3\x2\x2"+
		"\x2\x145\x146\x3\x2\x2\x2\x146\x147\a\x37\x2\x2\x147\x149\x5&\x14\x2\x148"+
		"\x12B\x3\x2\x2\x2\x148\x131\x3\x2\x2\x2\x148\x139\x3\x2\x2\x2\x149-\x3"+
		"\x2\x2\x2\x14A\x14D\x5\x30\x19\x2\x14B\x14D\x5\x32\x1A\x2\x14C\x14A\x3"+
		"\x2\x2\x2\x14C\x14B\x3\x2\x2\x2\x14D/\x3\x2\x2\x2\x14E\x14F\a\f\x2\x2"+
		"\x14F\x150\a\x36\x2\x2\x150\x151\x5\x34\x1B\x2\x151\x152\a\x37\x2\x2\x152"+
		"\x155\x5&\x14\x2\x153\x154\a\r\x2\x2\x154\x156\x5&\x14\x2\x155\x153\x3"+
		"\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x31\x3\x2\x2\x2\x157\x158\a\xE\x2"+
		"\x2\x158\x159\a\x36\x2\x2\x159\x15A\x5\x34\x1B\x2\x15A\x15B\a\x37\x2\x2"+
		"\x15B\x15C\x5&\x14\x2\x15C\x33\x3\x2\x2\x2\x15D\x161\x5H%\x2\x15E\x15F"+
		"\x5P)\x2\x15F\x160\x5R*\x2\x160\x162\x3\x2\x2\x2\x161\x15E\x3\x2\x2\x2"+
		"\x161\x162\x3\x2\x2\x2\x162\x16A\x3\x2\x2\x2\x163\x167\x5R*\x2\x164\x165"+
		"\x5P)\x2\x165\x166\x5R*\x2\x166\x168\x3\x2\x2\x2\x167\x164\x3\x2\x2\x2"+
		"\x167\x168\x3\x2\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x15D\x3\x2\x2\x2\x169"+
		"\x163\x3\x2\x2\x2\x16A\x35\x3\x2\x2\x2\x16B\x16C\x5T+\x2\x16C\x37\x3\x2"+
		"\x2\x2\x16D\x172\x5\x34\x1B\x2\x16E\x16F\a<\x2\x2\x16F\x171\x5\x34\x1B"+
		"\x2\x170\x16E\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2"+
		"\x172\x173\x3\x2\x2\x2\x173\x176\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175"+
		"\x16D\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x39\x3\x2\x2\x2\x177\x178"+
		"\t\x2\x2\x2\x178;\x3\x2\x2\x2\x179\x17C\x5:\x1E\x2\x17A\x17C\a/\x2\x2"+
		"\x17B\x179\x3\x2\x2\x2\x17B\x17A\x3\x2\x2\x2\x17C=\x3\x2\x2\x2\x17D\x185"+
		"\x5@!\x2\x17E\x185\aJ\x2\x2\x17F\x185\x5<\x1F\x2\x180\x181\a\x36\x2\x2"+
		"\x181\x182\x5\x34\x1B\x2\x182\x183\a\x37\x2\x2\x183\x185\x3\x2\x2\x2\x184"+
		"\x17D\x3\x2\x2\x2\x184\x17E\x3\x2\x2\x2\x184\x17F\x3\x2\x2\x2\x184\x180"+
		"\x3\x2\x2\x2\x185?\x3\x2\x2\x2\x186\x187\aJ\x2\x2\x187\x188\a\x36\x2\x2"+
		"\x188\x189\x5\x38\x1D\x2\x189\x18A\a\x37\x2\x2\x18A\x41\x3\x2\x2\x2\x18B"+
		"\x18C\t\x3\x2\x2\x18C\x43\x3\x2\x2\x2\x18D\x18E\x5> \x2\x18E\x18F\x5\x46"+
		"$\x2\x18F\x192\x3\x2\x2\x2\x190\x192\x5> \x2\x191\x18D\x3\x2\x2\x2\x191"+
		"\x190\x3\x2\x2\x2\x192\x45\x3\x2\x2\x2\x193\x194\a\x38\x2\x2\x194\x195"+
		"\x5\x34\x1B\x2\x195\x196\a\x39\x2\x2\x196\x19E\x3\x2\x2\x2\x197\x198\a"+
		"=\x2\x2\x198\x19E\aJ\x2\x2\x199\x19A\a>\x2\x2\x19A\x19E\aJ\x2\x2\x19B"+
		"\x19E\a\x12\x2\x2\x19C\x19E\a\x13\x2\x2\x19D\x193\x3\x2\x2\x2\x19D\x197"+
		"\x3\x2\x2\x2\x19D\x199\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19C\x3"+
		"\x2\x2\x2\x19EG\x3\x2\x2\x2\x19F\x1A0\aJ\x2\x2\x1A0\x1A1\aJ\x2\x2\x1A1"+
		"I\x3\x2\x2\x2\x1A2\x1AB\x5\x44#\x2\x1A3\x1A4\a\x12\x2\x2\x1A4\x1AB\x5"+
		"J&\x2\x1A5\x1A6\a\x13\x2\x2\x1A6\x1AB\x5J&\x2\x1A7\x1A8\x5\x42\"\x2\x1A8"+
		"\x1A9\x5h\x35\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x1A2\x3\x2\x2\x2\x1AA\x1A3"+
		"\x3\x2\x2\x2\x1AA\x1A5\x3\x2\x2\x2\x1AA\x1A7\x3\x2\x2\x2\x1ABK\x3\x2\x2"+
		"\x2\x1AC\x1AF\x5H%\x2\x1AD\x1AF\x5J&\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AD"+
		"\x3\x2\x2\x2\x1AFM\x3\x2\x2\x2\x1B0\x1B1\x5L\'\x2\x1B1\x1B2\x5P)\x2\x1B2"+
		"\x1B3\x5R*\x2\x1B3O\x3\x2\x2\x2\x1B4\x1C0\a:\x2\x2\x1B5\x1C0\a\x14\x2"+
		"\x2\x1B6\x1C0\a\x15\x2\x2\x1B7\x1C0\a\x16\x2\x2\x1B8\x1C0\a\x17\x2\x2"+
		"\x1B9\x1C0\a\x18\x2\x2\x1BA\x1C0\a\x19\x2\x2\x1BB\x1C0\a\x1A\x2\x2\x1BC"+
		"\x1C0\a\x1B\x2\x2\x1BD\x1C0\a\x1C\x2\x2\x1BE\x1C0\a\x1D\x2\x2\x1BF\x1B4"+
		"\x3\x2\x2\x2\x1BF\x1B5\x3\x2\x2\x2\x1BF\x1B6\x3\x2\x2\x2\x1BF\x1B7\x3"+
		"\x2\x2\x2\x1BF\x1B8\x3\x2\x2\x2\x1BF\x1B9\x3\x2\x2\x2\x1BF\x1BA\x3\x2"+
		"\x2\x2\x1BF\x1BB\x3\x2\x2\x2\x1BF\x1BC\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2"+
		"\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0Q\x3\x2\x2\x2\x1C1\x1C7\x5T+\x2\x1C2\x1C3"+
		"\a?\x2\x2\x1C3\x1C4\x5T+\x2\x1C4\x1C5\a\x30\x2\x2\x1C5\x1C6\x5T+\x2\x1C6"+
		"\x1C8\x3\x2\x2\x2\x1C7\x1C2\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8S\x3"+
		"\x2\x2\x2\x1C9\x1CE\x5V,\x2\x1CA\x1CB\a\x1E\x2\x2\x1CB\x1CD\x5V,\x2\x1CC"+
		"\x1CA\x3\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF"+
		"\x3\x2\x2\x2\x1CFU\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D1\x1D6\x5X-\x2"+
		"\x1D2\x1D3\a\x1F\x2\x2\x1D3\x1D5\x5X-\x2\x1D4\x1D2\x3\x2\x2\x2\x1D5\x1D8"+
		"\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7W\x3\x2\x2"+
		"\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9\x1DE\x5Z.\x2\x1DA\x1DB\a \x2\x2\x1DB\x1DD"+
		"\x5Z.\x2\x1DC\x1DA\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2\x1DE\x1DC\x3\x2\x2"+
		"\x2\x1DE\x1DF\x3\x2\x2\x2\x1DFY\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E1"+
		"\x1E6\x5\\/\x2\x1E2\x1E3\a!\x2\x2\x1E3\x1E5\x5\\/\x2\x1E4\x1E2\x3\x2\x2"+
		"\x2\x1E5\x1E8\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2"+
		"\x1E7[\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E9\x1EE\x5^\x30\x2\x1EA\x1EB"+
		"\a@\x2\x2\x1EB\x1ED\x5^\x30\x2\x1EC\x1EA\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2"+
		"\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF]\x3\x2\x2\x2\x1F0"+
		"\x1EE\x3\x2\x2\x2\x1F1\x1F6\x5`\x31\x2\x1F2\x1F3\t\x4\x2\x2\x1F3\x1F5"+
		"\x5`\x31\x2\x1F4\x1F2\x3\x2\x2\x2\x1F5\x1F8\x3\x2\x2\x2\x1F6\x1F4\x3\x2"+
		"\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7_\x3\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F9"+
		"\x1FE\x5\x62\x32\x2\x1FA\x1FB\t\x5\x2\x2\x1FB\x1FD\x5\x62\x32\x2\x1FC"+
		"\x1FA\x3\x2\x2\x2\x1FD\x200\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FE\x1FF"+
		"\x3\x2\x2\x2\x1FF\x61\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2\x201\x206\x5\x64"+
		"\x33\x2\x202\x203\t\x6\x2\x2\x203\x205\x5\x64\x33\x2\x204\x202\x3\x2\x2"+
		"\x2\x205\x208\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2"+
		"\x207\x63\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x209\x20E\x5\x66\x34\x2\x20A"+
		"\x20B\t\a\x2\x2\x20B\x20D\x5\x66\x34\x2\x20C\x20A\x3\x2\x2\x2\x20D\x210"+
		"\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x65\x3\x2"+
		"\x2\x2\x210\x20E\x3\x2\x2\x2\x211\x216\x5h\x35\x2\x212\x213\t\b\x2\x2"+
		"\x213\x215\x5h\x35\x2\x214\x212\x3\x2\x2\x2\x215\x218\x3\x2\x2\x2\x216"+
		"\x214\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217g\x3\x2\x2\x2\x218\x216\x3"+
		"\x2\x2\x2\x219\x21A\a\x36\x2\x2\x21A\x21B\aJ\x2\x2\x21B\x21C\a\x37\x2"+
		"\x2\x21C\x21F\x5h\x35\x2\x21D\x21F\x5J&\x2\x21E\x219\x3\x2\x2\x2\x21E"+
		"\x21D\x3\x2\x2\x2\x21Fi\x3\x2\x2\x2\x30ny\x81\x8D\x9D\xA6\xD2\xE9\xEF"+
		"\xF7\xFE\x106\x110\x116\x126\x129\x13C\x140\x144\x148\x14C\x155\x161\x167"+
		"\x169\x172\x175\x17B\x184\x191\x19D\x1AA\x1AE\x1BF\x1C7\x1CE\x1D6\x1DE"+
		"\x1E6\x1EE\x1F6\x1FE\x206\x20E\x216\x21E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
